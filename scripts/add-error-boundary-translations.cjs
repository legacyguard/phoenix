#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const LOCALES_DIR = path.join(__dirname, '../src/i18n/locales');

// Define the errorBoundary translations
const errorBoundaryTranslations = {
  en: {
    errorBoundary: {
      title: "Something went wrong",
      description: "We encountered an unexpected error. Don't worry, your data is safe.",
      errorId: "Error ID",
      tryAgain: "Try again",
      reloadPage: "Reload page",
      goToHomepage: "Go to homepage",
      helpText: "If this problem persists, please contact support with the error ID above.",
      technicalDetails: "Technical details",
      stackTrace: "Stack trace",
      componentStack: "Component stack",
      show: "Show details",
      hide: "Hide details"
    }
  },
  sk: {
    errorBoundary: {
      title: "Nieƒço sa pokazilo",
      description: "Vyskytla sa neoƒçak√°van√° chyba. Nebojte sa, va≈°e √∫daje s√∫ v bezpeƒç√≠.",
      errorId: "ID chyby",
      tryAgain: "Sk√∫si≈• znova",
      reloadPage: "Obnovi≈• str√°nku",
      goToHomepage: "Prejs≈• na domovsk√∫ str√°nku",
      helpText: "Ak probl√©m pretrv√°va, kontaktujte podporu s ID chyby uveden√Ωm vy≈°≈°ie.",
      technicalDetails: "Technick√© detaily",
      stackTrace: "Z√°sobn√≠k volan√≠",
      componentStack: "Z√°sobn√≠k komponentov",
      show: "Zobrazi≈• detaily",
      hide: "Skry≈• detaily"
    }
  },
  cs: {
    errorBoundary: {
      title: "Nƒõco se pokazilo",
      description: "Do≈°lo k neoƒçek√°van√© chybƒõ. Nebojte se, va≈°e data jsou v bezpeƒç√≠.",
      errorId: "ID chyby",
      tryAgain: "Zkusit znovu",
      reloadPage: "Obnovit str√°nku",
      goToHomepage: "P≈ôej√≠t na domovskou str√°nku",
      helpText: "Pokud probl√©m p≈ôetrv√°v√°, kontaktujte podporu s ID chyby uveden√Ωm v√Ω≈°e.",
      technicalDetails: "Technick√© detaily",
      stackTrace: "Z√°sobn√≠k vol√°n√≠",
      componentStack: "Z√°sobn√≠k komponent",
      show: "Zobrazit detaily",
      hide: "Skr√Ωt detaily"
    }
  }
};

// Function to add errorBoundary translations to ui-common.json
async function addErrorBoundaryTranslations() {
  console.log('üîß Adding errorBoundary translations...\n');
  
  const languages = fs.readdirSync(LOCALES_DIR)
    .filter(dir => {
      const stats = fs.statSync(path.join(LOCALES_DIR, dir));
      return stats.isDirectory() && !dir.startsWith('.');
    });
  
  for (const lang of languages) {
    const uiCommonPath = path.join(LOCALES_DIR, lang, 'ui-common.json');
    
    try {
      let content = {};
      
      // Read existing content
      if (fs.existsSync(uiCommonPath)) {
        const fileContent = fs.readFileSync(uiCommonPath, 'utf8');
        content = JSON.parse(fileContent);
      }
      
      // Get translations for this language or use English as fallback
      const translations = errorBoundaryTranslations[lang] || errorBoundaryTranslations.en;
      
      // If not English and no translation exists, mark for translation
      if (lang !== 'en' && !errorBoundaryTranslations[lang]) {
        Object.keys(translations.errorBoundary).forEach(key => {
          if (typeof translations.errorBoundary[key] === 'string') {
            translations.errorBoundary[key] = `[TRANSLATE] ${translations.errorBoundary[key]}`;
          }
        });
      }
      
      // Merge with existing content
      content = {
        ...content,
        ...translations
      };
      
      // Write back
      fs.writeFileSync(uiCommonPath, JSON.stringify(content, null, 2), 'utf8');
      console.log(`‚úÖ Updated ${lang}/ui-common.json`);
      
    } catch (error) {
      console.error(`‚ùå Error updating ${lang}/ui-common.json:`, error.message);
    }
  }
  
  console.log('\n‚ú® ErrorBoundary translations added successfully!');
}

// Run the script
addErrorBoundaryTranslations().catch(console.error);

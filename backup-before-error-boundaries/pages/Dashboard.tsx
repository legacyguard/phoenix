import React, { useState, useEffect } from 'react';import { useTranslation } from 'react-i18next';import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';import { Button } from '@/components/ui/button';import { Badge } from '@/components/ui/badge';import { Input } from '@/components/ui/input';import { Label } from '@/components/ui/label';import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';import { StrategicSummary } from '@/components/dashboard/StrategicSummary';import { PillarColumn } from '@/components/dashboard/PillarColumn';import { OnboardingWizard, TaskItem } from '@/components/onboarding/OnboardingWizard';import { TaskCard } from '@/components/dashboard/TaskCard';import { DocumentCard } from '@/components/dashboard/DocumentCard';import { DocumentUpload } from '@/components/dashboard/DocumentUpload';import { GuardianCard } from '@/components/dashboard/GuardianCard';import { GuardianUpload } from '@/components/dashboard/GuardianUpload';import { useCountry } from '@/contexts/CountryContext';import { COUNTRY_CONFIGS } from '@/config/countries';import { supabase } from '@/integrations/supabase/client';import { toast } from 'sonner';import {   Shield,   Users,   Archive,   Clock,   Plus,   TrendingUp,   AlertTriangle,  CheckCircle2,  Lock,  FolderOpen,  ArrowRight,  Home,  Building,  Car,  Wallet,  Heart,  Pencil,  Trash2,  Banknote} from 'lucide-react';interface Asset {  id: string;  name: string;  type: string;  countryCode: string;}interface Guardian {  id: string;  full_name: string;  relationship: string;  country_code: string;  roles: string[];  invitation_status?: string;  invitation_email?: string;  invitation_token?: string;}interface Beneficiary {  id: string;  name: string;  allocation: number;  countryCode: string;}interface Document {  id: string;  name: string;  type: string;  countryCode: string;  expirationDate?: string | null;  is_key_document?: boolean;}export const Dashboard: React.FC = () => {  const { t } = useTranslation('common');  const { selectedCountryCode } = useCountry();  // Check if user is new and needs onboarding  const [showOnboarding, setShowOnboarding] = useState(() => {    return !localStorage.getItem('legacyguard-onboarding-completed');  });    // Task management state  const [tasks, setTasks] = useState<TaskItem[]>(() => {    const savedTasks = localStorage.getItem('legacyguard-tasks');    return savedTasks ? JSON.parse(savedTasks) : [];  });    // Asset state  const [assets, setAssets] = useState<Asset[]>([]);  const [isAssetSheetOpen, setIsAssetSheetOpen] = useState(false);  const [editingAsset, setEditingAsset] = useState<Asset | null>(null);  const [newAssetName, setNewAssetName] = useState('');  const [newAssetType, setNewAssetType] = useState('');    // Guardian state  const [guardians, setGuardians] = useState<Guardian[]>([]);  const [isGuardianSheetOpen, setIsGuardianSheetOpen] = useState(false);  const [editingGuardian, setEditingGuardian] = useState<Guardian | null>(null);    // Invitation state  const [isInviteSheetOpen, setIsInviteSheetOpen] = useState(false);  const [invitingGuardian, setInvitingGuardian] = useState<Guardian | null>(null);  const [inviteEmail, setInviteEmail] = useState('');    // Beneficiary state  const [beneficiaries, setBeneficiaries] = useState<Beneficiary[]>([]);  const [isBeneficiarySheetOpen, setIsBeneficiarySheetOpen] = useState(false);  const [editingBeneficiary, setEditingBeneficiary] = useState<Beneficiary | null>(null);  const [newBeneficiaryName, setNewBeneficiaryName] = useState('');  const [newBeneficiaryAllocation, setNewBeneficiaryAllocation] = useState('');  // Document state  const [documents, setDocuments] = useState<Document[]>([]);  const [isDocumentSheetOpen, setIsDocumentSheetOpen] = useState(false);  const [editingDocument, setEditingDocument] = useState<Document | null>(null);  const [showDocumentUpload, setShowDocumentUpload] = useState(false);  // Helper functions  const getCountryFlag = (countryCode: string) => {    const config = Object.values(COUNTRY_CONFIGS).find(c => c.code === countryCode);    return config?.flag || 'üè≥Ô∏è';  };  const getAssetIcon = (type: string) => {    const lowerType = type.toLowerCase();    if (lowerType.includes('real estate') || lowerType.includes('property') || lowerType.includes('house') || lowerType.includes('apartment')) {      return <Home className="h-4 w-4" />;    }    if (lowerType.includes('business') || lowerType.includes('company')) {      return <Building className="h-4 w-4" />;    }    if (lowerType.includes('vehicle') || lowerType.includes('car')) {      return <Car className="h-4 w-4" />;    }    if (lowerType.includes('financial') || lowerType.includes('investment') || lowerType.includes('account')) {      return <Wallet className="h-4 w-4" />;    }    return <Archive className="h-4 w-4" />;  };  const handleOnboardingComplete = (newTasks: TaskItem[]) => {    setTasks(newTasks);    localStorage.setItem('legacyguard-tasks', JSON.stringify(newTasks));    localStorage.setItem('legacyguard-onboarding-completed', 'true');    setShowOnboarding(false);    toast.success(t('dashboard.messages.welcomeToLegacyGuard'));  };  const handleToggleTaskComplete = (taskId: string) => {    const updatedTasks = tasks.map(task =>      task.id === taskId ? { ...task, completed: !task.completed } : task    );    setTasks(updatedTasks);    localStorage.setItem('legacyguard-tasks', JSON.stringify(updatedTasks));        const task = tasks.find(t => t.id === taskId);    if (task && !task.completed) {      // Sophisticated toast notifications      const completedTasks = updatedTasks.filter(t => t.completed);      const isFirstTask = completedTasks.length === 1;      const isLastTask = completedTasks.length === updatedTasks.length;            if (isFirstTask) {        toast.success(t('dashboard.messages.excellentFirstStep'), {           description: t('dashboard.messages.taskBringsClarity')         });      } else if (isLastTask) {        toast.success(t('dashboard.messages.projectOrderComplete'), {           description: t('dashboard.messages.successfullySecured')         });      } else {        toast.success(t('dashboard.messages.progressMade'), {           description: t('dashboard.messages.anotherPieceInPlace')         });      }    }  };  const handleStartTask = (taskId: string) => {    const task = tasks.find(t => t.id === taskId);    if (task) {      toast.info(t('dashboard.messages.startingTask', { taskTitle: task.title }));    }  };  // Load documents and guardians on component mount  useEffect(() => {    // eslint-disable-next-line react-hooks/exhaustive-deps    loadDocuments();    loadGuardians();  }, []);  const loadDocuments = async () => {    try {      const { data: { user } } = await supabase.auth.getUser();      if (!user) return;      const { data, error } = await supabase        .from('documents')        .select('*')        .eq('user_id', user.id);      if (error) {        return;      }      const mappedDocuments = data.map(doc => ({        id: doc.id,        name: doc.name,        type: doc.type,        countryCode: doc.country_code,        expirationDate: doc.expiration_date,        is_key_document: doc.is_key_document,      }));      setDocuments(mappedDocuments);        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Nezn√°ma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailn√© logovanie pre debugging      console.error('[Aplik√°cia] Chyba pri oper√°cia:', {        timestamp,        operation: 'loadDocuments',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Pou≈æ√≠vateƒæsky pr√≠vetiv√° spr√°va      let userMessage = 'Nastala chyba pri oper√°cia.';            // ≈†pecifick√© spr√°vy podƒæa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Po≈æadovan√© d√°ta neboli n√°jden√©.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetov√© pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nem√°te opr√°vnenie na t√∫to akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Tak√Ωto z√°znam u≈æ existuje.';      }            toast.error(userMessage);    });    }  };  const loadGuardians = async () => {    try {      const { data: { user } } = await supabase.auth.getUser();      if (!user) return;      const { data, error } = await supabase        .from('guardians')        .select('*')        .eq('user_id', user.id);      if (error) {        return;      }      setGuardians(data || []);        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Nezn√°ma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailn√© logovanie pre debugging      console.error('[Aplik√°cia] Chyba pri oper√°cia:', {        timestamp,        operation: 'loadGuardians',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Pou≈æ√≠vateƒæsky pr√≠vetiv√° spr√°va      let userMessage = 'Nastala chyba pri oper√°cia.';            // ≈†pecifick√© spr√°vy podƒæa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Po≈æadovan√© d√°ta neboli n√°jden√©.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetov√© pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nem√°te opr√°vnenie na t√∫to akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Tak√Ωto z√°znam u≈æ existuje.';      }            toast.error(userMessage);    });    }  };  const handleDocumentUploaded = (document: Record<string, unknown>) => {    const mappedDocument = {      id: document.id,      name: document.name,      type: document.type,      countryCode: document.country_code,      expirationDate: document.expiration_date,      is_key_document: document.is_key_document || false,    };    setDocuments(prev => [...prev, mappedDocument]);    setIsDocumentSheetOpen(false);    setShowDocumentUpload(false);  };  const handleEditDocument = (document: Document) => {    setEditingDocument(document);    // For now, just show a toast as editing is a future feature    toast.info(t('dashboard.messages.documentEditingSoon'));  };  const handleDeleteDocument = async (id: string) => {    try {      const { error } = await supabase        .from('documents')        .delete()        .eq('id', id);      if (error) {        throw error;      }      setDocuments(prev => prev.filter(doc => doc.id !== id));      toast.success(t('dashboard.messages.documentDeleted'));        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Nezn√°ma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailn√© logovanie pre debugging      console.error('[Aplik√°cia] Chyba pri oper√°cia:', {        timestamp,        operation: 'handleDeleteDocument',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Pou≈æ√≠vateƒæsky pr√≠vetiv√° spr√°va      let userMessage = 'Nastala chyba pri oper√°cia.';            // ≈†pecifick√© spr√°vy podƒæa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Po≈æadovan√© d√°ta neboli n√°jden√©.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetov√© pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nem√°te opr√°vnenie na t√∫to akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Tak√Ωto z√°znam u≈æ existuje.';      }            toast.error(userMessage);    });            toast.error(t('dashboard.errors.failedToDeleteDocument'), {        description: error instanceof Error ? error.message : 'Nepodarilo sa vymaza≈• dokument'      });    }  };  const handleToggleKeyDocument = async (id: string, isKey: boolean) => {    try {      const { error } = await supabase        .from('documents')        .update({ is_key_document: isKey })        .eq('id', id);      if (error) {        throw error;      }      setDocuments(prev => prev.map(doc =>         doc.id === id ? { ...doc, is_key_document: isKey } : doc      ));            toast.success(isKey ? t('dashboard.messages.documentMarkedAsKey') : t('dashboard.messages.documentRemovedFromKey'));        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Nezn√°ma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailn√© logovanie pre debugging      console.error('[Aplik√°cia] Chyba pri oper√°cia:', {        timestamp,        operation: 'handleToggleKeyDocument',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Pou≈æ√≠vateƒæsky pr√≠vetiv√° spr√°va      let userMessage = 'Nastala chyba pri oper√°cia.';            // ≈†pecifick√© spr√°vy podƒæa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Po≈æadovan√© d√°ta neboli n√°jden√©.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetov√© pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nem√°te opr√°vnenie na t√∫to akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Tak√Ωto z√°znam u≈æ existuje.';      }            toast.error(userMessage);    });            toast.error(t('dashboard.errors.failedToUpdateDocument'), {        description: 'Sk√∫ste to pros√≠m znova'      });    }  };  const handleSaveAsset = () => {    if (!newAssetName.trim() || !newAssetType.trim()) {      toast.error(t('dashboard.errors.pleaseFillAllFields'));      return;    }    if (editingAsset) {      setAssets(prev => prev.map(asset =>         asset.id === editingAsset.id           ? { ...asset, name: newAssetName.trim(), type: newAssetType.trim() }          : asset      ));      toast.success(t('dashboard.messages.assetUpdated'));    } else {      const newAsset: Asset = {        id: Date.now().toString(),        name: newAssetName.trim(),        type: newAssetType.trim(),        countryCode: selectedCountryCode      };      setAssets(prev => [...prev, newAsset]);      toast.success(t('dashboard.messages.assetAdded'));    }    setNewAssetName('');    setNewAssetType('');    setEditingAsset(null);    setIsAssetSheetOpen(false);  };  const handleEditAsset = (asset: Asset) => {    setEditingAsset(asset);    setNewAssetName(asset.name);    setNewAssetType(asset.type);    setIsAssetSheetOpen(true);  };  const handleDeleteAsset = (id: string) => {    setAssets(prev => prev.filter(asset => asset.id !== id));    toast.success(t('dashboard.messages.assetDeleted'));  };  const handleGuardianSuccess = () => {    loadGuardians();    setIsGuardianSheetOpen(false);    setEditingGuardian(null);  };  const handleEditGuardian = (guardian: Guardian) => {    setEditingGuardian(guardian);    setIsGuardianSheetOpen(true);  };  const handleDeleteGuardian = async (id: string) => {    try {      const { error } = await supabase        .from('guardians')        .delete()        .eq('id', id);      if (error) {        throw error;      }      setGuardians(prev => prev.filter(guardian => guardian.id !== id));      toast.success(t('dashboard.messages.guardianDeleted'));        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Nezn√°ma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailn√© logovanie pre debugging      console.error('[Aplik√°cia] Chyba pri oper√°cia:', {        timestamp,        operation: 'handleDeleteGuardian',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Pou≈æ√≠vateƒæsky pr√≠vetiv√° spr√°va      let userMessage = 'Nastala chyba pri oper√°cia.';            // ≈†pecifick√© spr√°vy podƒæa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Po≈æadovan√© d√°ta neboli n√°jden√©.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetov√© pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nem√°te opr√°vnenie na t√∫to akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Tak√Ωto z√°znam u≈æ existuje.';      }            toast.error(userMessage);    });            toast.error(t('dashboard.errors.failedToDeleteGuardian'), {        description: error instanceof Error ? error.message : 'Nepodarilo sa vymaza≈• guardiana'      });    }  };  const handleSendInvite = (guardian: Guardian) => {    setInvitingGuardian(guardian);    setInviteEmail('');    setIsInviteSheetOpen(true);  };  const handleSendInviteConfirm = async () => {    if (!invitingGuardian || !inviteEmail.trim()) {      toast.error(t('dashboard.errors.pleaseEnterValidEmail'));      return;    }    try {      // Generate a unique invitation token      const inviteToken = crypto.randomUUID();            const { error } = await supabase        .from('guardians')        .update({          invitation_status: 'sent',          invitation_email: inviteEmail.trim(),          invitation_token: inviteToken,          invited_at: new Date().toISOString()        })        .eq('id', invitingGuardian.id);      if (error) {        throw error;      }      // Update local state      setGuardians(prev => prev.map(g =>         g.id === invitingGuardian.id           ? { ...g, invitation_status: 'sent', invitation_email: inviteEmail.trim() }          : g      ));      toast.success(t('dashboard.messages.invitationSent', { email: inviteEmail }));      setIsInviteSheetOpen(false);      setInvitingGuardian(null);      setInviteEmail('');        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Nezn√°ma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailn√© logovanie pre debugging      console.error('[Aplik√°cia] Chyba pri oper√°cia:', {        timestamp,        operation: 'handleSendInviteConfirm',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Pou≈æ√≠vateƒæsky pr√≠vetiv√° spr√°va      let userMessage = 'Nastala chyba pri oper√°cia.';            // ≈†pecifick√© spr√°vy podƒæa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Po≈æadovan√© d√°ta neboli n√°jden√©.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetov√© pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nem√°te opr√°vnenie na t√∫to akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Tak√Ωto z√°znam u≈æ existuje.';      }            toast.error(userMessage);    });            toast.error(t('dashboard.errors.failedToSendInvitation'), {        description: 'Skontrolujte emailov√∫ adresu a sk√∫ste znova'      });    }  };  const handleSaveBeneficiary = () => {    if (!newBeneficiaryName.trim() || !newBeneficiaryAllocation.trim()) {      toast.error(t('dashboard.errors.pleaseFillAllFields'));      return;    }    const allocation = parseInt(newBeneficiaryAllocation);    if (isNaN(allocation) || allocation < 1 || allocation > 100) {      toast.error(t('dashboard.errors.allocationMustBeBetween'));      return;    }    if (editingBeneficiary) {      setBeneficiaries(prev => prev.map(beneficiary =>         beneficiary.id === editingBeneficiary.id           ? { ...beneficiary, name: newBeneficiaryName.trim(), allocation }          : beneficiary      ));      toast.success(t('dashboard.messages.beneficiaryUpdated'));    } else {      const newBeneficiary: Beneficiary = {        id: Date.now().toString(),        name: newBeneficiaryName.trim(),        allocation,        countryCode: selectedCountryCode      };      setBeneficiaries(prev => [...prev, newBeneficiary]);      toast.success(t('dashboard.messages.beneficiaryAdded'));    }    setNewBeneficiaryName('');    setNewBeneficiaryAllocation('');    setEditingBeneficiary(null);    setIsBeneficiarySheetOpen(false);  };  const handleEditBeneficiary = (beneficiary: Beneficiary) => {    setEditingBeneficiary(beneficiary);    setNewBeneficiaryName(beneficiary.name);    setNewBeneficiaryAllocation(beneficiary.allocation.toString());    setIsBeneficiarySheetOpen(true);  };  const handleDeleteBeneficiary = (id: string) => {    setBeneficiaries(prev => prev.filter(beneficiary => beneficiary.id !== id));    toast.success(t('dashboard.messages.beneficiaryDeleted'));  };  return (    <>      <OnboardingWizard        isOpen={showOnboarding}        onClose={() => setShowOnboarding(false)}        onComplete={handleOnboardingComplete}      />            <div className="container mx-auto px-4 lg:px-8 py-8 space-y-8">        {/* Strategic Summary */}        <StrategicSummary />        {/* Project Order Tasks */}        {tasks.length > 0 && (          <div className="space-y-4">            <div className="flex items-center justify-between">              <h2 className="text-2xl font-bold">                {(() => {                  const completedTasks = tasks.filter(t => t.completed).length;                  const totalTasks = tasks.length;                                    if (completedTasks === 0) {                    return t('dashboard.header.initial');                  } else if (completedTasks === totalTasks) {                    return t('dashboard.header.complete');                  } else {                    return t('dashboard.header.inProgress');                  }                })()}              </h2>              <Badge variant="outline" className="text-sm">                {t('dashboard.tasks.progress', { completed: tasks.filter(t => t.completed).length, total: tasks.length })}              </Badge>            </div>            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">              {tasks.map((task) => (                <TaskCard                  key={task.id}                  task={task}                  onToggleComplete={handleToggleTaskComplete}                  onStartTask={handleStartTask}                />              ))}            </div>          </div>        )}        {/* Three Pillars */}        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-8">          {/* SECURE Pillar */}          <PillarColumn            title={t('pillars.secure.title')}            description={t('pillars.secure.description')}            icon={<Lock className="h-12 w-12 text-primary" />}          >            <div className="space-y-4">              <Sheet open={isGuardianSheetOpen} onOpenChange={setIsGuardianSheetOpen}>                <SheetTrigger asChild>                  <Button                     variant="outline"                     size="sm"                     className="w-full"                    onClick={() => {                      setEditingGuardian(null);                    }}                  >                    <Plus className="mr-2 h-4 w-4" />                    {t('dashboard.addGuardian')}                  </Button>                </SheetTrigger>                <SheetContent>                  <GuardianUpload                    onSuccess={handleGuardianSuccess}                    onCancel={() => setIsGuardianSheetOpen(false)}                    editingGuardian={editingGuardian}                  />                </SheetContent>              </Sheet>              {/* Display guardians */}              <div className="space-y-2">                {guardians.map((guardian) => (                  <GuardianCard                    key={guardian.id}                    guardian={guardian}                    onEdit={handleEditGuardian}                    onDelete={handleDeleteGuardian}                    onSendInvite={handleSendInvite}                  />                ))}                {guardians.length === 0 && (                  <p className="text-xs text-muted-foreground text-center py-4">                    {t('dashboard.empty.noGuardians')}                  </p>                )}              </div>            </div>          </PillarColumn>          {/* ORGANIZE Pillar */}          <PillarColumn            title={t('pillars.organize.title')}            description={t('pillars.organize.description')}            icon={<FolderOpen className="h-12 w-12 text-primary" />}          >            <div className="space-y-4">              {/* Add Asset/Document buttons */}              <div className="grid grid-cols-2 gap-2">                <Sheet open={isAssetSheetOpen} onOpenChange={setIsAssetSheetOpen}>                  <SheetTrigger asChild>                    <Button                       variant="outline"                       size="sm"                       className="w-full"                      onClick={() => {                        setEditingAsset(null);                        setNewAssetName('');                        setNewAssetType('');                      }}                    >                      <Plus className="mr-2 h-4 w-4" />                      {t('dashboard.addItem')}                    </Button>                  </SheetTrigger>                  <SheetContent>                    <SheetHeader>                      <SheetTitle>{editingAsset ? t('dashboard.sheets.editAsset') : t('dashboard.sheets.addAsset')}</SheetTitle>                      <SheetDescription>                        {editingAsset ? t('dashboard.sheets.editAssetDescription') : t('dashboard.sheets.addAssetDescription')}                      </SheetDescription>                    </SheetHeader>                    <div className="space-y-4 mt-6">                      <div className="space-y-2">                        <Label htmlFor="assetName">{t('dashboard.assetName')}</Label>                        <Input                          id="assetName"                          placeholder={t('dashboard.placeholders.assetName')}                          value={newAssetName}                          onChange={(e) => setNewAssetName(e.target.value)}                        />                      </div>                      <div className="space-y-2">                        <Label htmlFor="assetType">{t('dashboard.assetType')}</Label>                        <Input                          id="assetType"                          placeholder={t('dashboard.placeholders.assetType')}                          value={newAssetType}                          onChange={(e) => setNewAssetType(e.target.value)}                        />                      </div>                        <Button onClick={handleSaveAsset} className="w-full">                          {editingAsset ? t('dashboard.updateAsset') : t('dashboard.saveAsset')}                        </Button>                    </div>                  </SheetContent>                </Sheet>                <Sheet open={isDocumentSheetOpen} onOpenChange={setIsDocumentSheetOpen}>                  <SheetTrigger asChild>                    <Button                       variant="outline"                       size="sm"                       className="w-full"                      onClick={() => {                        setShowDocumentUpload(true);                        setEditingDocument(null);                      }}                    >                      <Plus className="mr-2 h-4 w-4" />                      {t('dashboard.uploadDocument')}                    </Button>                  </SheetTrigger>                  <SheetContent>                    <SheetHeader>                      <SheetTitle>{t('dashboard.sheets.uploadDocument')}</SheetTitle>                      <SheetDescription>                        {t('dashboard.sheets.uploadDocumentDescription')}                      </SheetDescription>                    </SheetHeader>                    <div className="mt-6">                      {showDocumentUpload && (                        <DocumentUpload                          onDocumentUploaded={handleDocumentUploaded}                          onCancel={() => setIsDocumentSheetOpen(false)}                        />                      )}                    </div>                  </SheetContent>                </Sheet>              </div>              {/* Display assets and documents */}              <div className="space-y-2">                {/* Assets */}                {assets.map((asset) => (                  <Card key={asset.id} className="p-3">                    <div className="flex items-start justify-between">                      <div className="flex items-start space-x-2">                        {getAssetIcon(asset.type)}                        <div>                          <h4 className="font-medium text-sm">{asset.name}</h4>                          <p className="text-xs text-muted-foreground">{asset.type}</p>                        </div>                      </div>                      <div className="flex items-center space-x-1">                        <span className="text-sm">{getCountryFlag(asset.countryCode)}</span>                        <Button                          variant="ghost"                          size="sm"                          className="h-6 w-6 p-0"                          onClick={() => handleEditAsset(asset)}                        >                          <Pencil className="h-3 w-3" />                        </Button>                        <Button                          variant="ghost"                          size="sm"                          className="h-6 w-6 p-0 text-destructive hover:text-destructive"                          onClick={() => handleDeleteAsset(asset.id)}                        >                          <Trash2 className="h-3 w-3" />                        </Button>                      </div>                    </div>                  </Card>                ))}                                {/* Documents */}                {documents.map((document) => (                  <DocumentCard                    key={document.id}                    document={document}                    onEdit={handleEditDocument}                    onDelete={handleDeleteDocument}                    onToggleKeyDocument={handleToggleKeyDocument}                  />                ))}                                {assets.length === 0 && documents.length === 0 && (                  <p className="text-xs text-muted-foreground text-center py-4">                    {t('dashboard.empty.noAssetsOrDocuments')}                  </p>                )}              </div>            </div>          </PillarColumn>          {/* TRANSFER Pillar */}          <PillarColumn            title={t('pillars.transfer.title')}            description={t('pillars.transfer.description')}            icon={<ArrowRight className="h-12 w-12 text-primary" />}          >            <div className="space-y-4">              <Sheet open={isBeneficiarySheetOpen} onOpenChange={setIsBeneficiarySheetOpen}>                <SheetTrigger asChild>                  <Button                     variant="outline"                     size="sm"                     className="w-full"                    onClick={() => {                      setEditingBeneficiary(null);                      setNewBeneficiaryName('');                      setNewBeneficiaryAllocation('');                    }}                  >                    <Plus className="mr-2 h-4 w-4" />                    {t('dashboard.addBeneficiary')}                  </Button>                </SheetTrigger>                <SheetContent>                  <SheetHeader>                      <SheetTitle>{editingBeneficiary ? t('dashboard.sheets.editBeneficiary') : t('dashboard.sheets.addBeneficiary')}</SheetTitle>                      <SheetDescription>                        {editingBeneficiary ? t('dashboard.sheets.editBeneficiaryDescription') : t('dashboard.sheets.addBeneficiaryDescription')}                      </SheetDescription>                  </SheetHeader>                  <div className="space-y-4 mt-6">                    <div className="space-y-2">                      <Label htmlFor="beneficiaryName">{t('dashboard.beneficiaryName')}</Label>                      <Input                        id="beneficiaryName"                        placeholder={t('dashboard.placeholders.beneficiaryName')}                        value={newBeneficiaryName}                        onChange={(e) => setNewBeneficiaryName(e.target.value)}                      />                    </div>                    <div className="space-y-2">                      <Label htmlFor="allocation">{t('dashboard.allocation')}</Label>                      <Input                        id="allocation"                        type="number"                        min="1"                        max="100"                        placeholder={t('dashboard.placeholders.allocationPercentage')}                        value={newBeneficiaryAllocation}                        onChange={(e) => setNewBeneficiaryAllocation(e.target.value)}                      />                    </div>                    <Button onClick={handleSaveBeneficiary} className="w-full">                      {editingBeneficiary ? t('dashboard.updateBeneficiary') : t('dashboard.saveBeneficiary')}                    </Button>                  </div>                </SheetContent>              </Sheet>              {/* Display beneficiaries */}              <div className="space-y-2">                {beneficiaries.map((beneficiary) => (                  <Card key={beneficiary.id} className="p-3">                    <div className="flex items-start justify-between">                      <div className="flex items-start space-x-2">                        <Banknote className="h-4 w-4 text-primary mt-0.5" />                        <div>                          <h4 className="font-medium text-sm">{beneficiary.name}</h4>                          <p className="text-xs text-muted-foreground">{t('dashboard.allocationDisplay', { percentage: beneficiary.allocation })}</p>                        </div>                      </div>                      <div className="flex items-center space-x-1">                        <span className="text-sm">{getCountryFlag(beneficiary.countryCode)}</span>                        <Button                          variant="ghost"                          size="sm"                          className="h-6 w-6 p-0"                          onClick={() => handleEditBeneficiary(beneficiary)}                        >                          <Pencil className="h-3 w-3" />                        </Button>                        <Button                          variant="ghost"                          size="sm"                          className="h-6 w-6 p-0 text-destructive hover:text-destructive"                          onClick={() => handleDeleteBeneficiary(beneficiary.id)}                        >                          <Trash2 className="h-3 w-3" />                        </Button>                      </div>                    </div>                  </Card>                ))}                {beneficiaries.length === 0 && (                  <p className="text-xs text-muted-foreground text-center py-4">                    {t('dashboard.empty.noBeneficiaries')}                  </p>                )}              </div>            </div>          </PillarColumn>        </div>        {/* Stats Grid */}        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">          <Card variant="heritage">            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">              <CardTitle className="text-sm font-medium">{t('dashboard.stats.totalAssets')}</CardTitle>              <Archive className="h-4 w-4 text-primary" />            </CardHeader>            <CardContent>              <div className="text-2xl font-bold text-primary">{assets.length}</div>              <p className="text-xs text-muted-foreground">                {t('dashboard.stats.activeAssetsManaged')}              </p>            </CardContent>          </Card>          <Card variant="earth">            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">              <CardTitle className="text-sm font-medium">{t('dashboard.stats.activeGuardians')}</CardTitle>              <Users className="h-4 w-4 text-primary" />            </CardHeader>            <CardContent>              <div className="text-2xl font-bold text-primary">{guardians.length}</div>              <p className="text-xs text-muted-foreground">                {t('dashboard.stats.trustedGuardians')}              </p>            </CardContent>          </Card>          <Card variant="heritage">            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">              <CardTitle className="text-sm font-medium">{t('dashboard.stats.beneficiaries')}</CardTitle>              <Heart className="h-4 w-4 text-primary" />            </CardHeader>            <CardContent>              <div className="text-2xl font-bold text-primary">{beneficiaries.length}</div>              <p className="text-xs text-muted-foreground">                {t('dashboard.stats.legacyRecipients')}              </p>            </CardContent>          </Card>          <Card variant="earth">            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">              <CardTitle className="text-sm font-medium">{t('dashboard.stats.securityScore')}</CardTitle>              <Shield className="h-4 w-4 text-primary" />            </CardHeader>            <CardContent>              <div className="text-2xl font-bold text-primary">{t('dashboard.stats.securityScoreValue')}</div>              <Badge variant="secondary" className="text-xs">                {t('dashboard.stats.excellent')}              </Badge>            </CardContent>          </Card>        </div>      </div>      {/* Guardian Invitation Sheet */}      <Sheet open={isInviteSheetOpen} onOpenChange={setIsInviteSheetOpen}>        <SheetContent>          <SheetHeader>            <SheetTitle>{t('dashboard.invitation.title')}</SheetTitle>            <SheetDescription>              {t('dashboard.invitation.description', { name: invitingGuardian?.full_name })}            </SheetDescription>          </SheetHeader>          <div className="space-y-4 mt-6">            <div className="bg-muted/50 p-4 rounded-lg">              <h4 className="font-medium text-sm mb-2">{t('dashboard.invitation.guardianDetails')}</h4>              <p className="text-sm"><strong>{t('dashboard.invitation.name')}:</strong> {invitingGuardian?.full_name}</p>              <p className="text-sm"><strong>{t('dashboard.invitation.relationship')}:</strong> {invitingGuardian?.relationship}</p>              <p className="text-sm"><strong>{t('dashboard.invitation.roles')}:</strong> {invitingGuardian?.roles.join(', ')}</p>            </div>                        <div className="space-y-2">              <Label htmlFor="inviteEmail">{t('dashboard.invitation.emailLabel')}</Label>              <Input                id="inviteEmail"                type="email"                placeholder={t('dashboard.placeholders.guardianEmail')}                value={inviteEmail}                onChange={(e) => setInviteEmail(e.target.value)}                required              />            </div>            <div className="flex space-x-3 pt-4">              <Button onClick={handleSendInviteConfirm} className="flex-1">                {t('dashboard.invitation.sendButton')}              </Button>              <Button                 variant="outline"                 onClick={() => setIsInviteSheetOpen(false)}              >                {t('dashboard.invitation.cancelButton')}              </Button>            </div>          </div>        </SheetContent>      </Sheet>    </>  );};export default Dashboard;
[{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/components/common/CountryLanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/components/common/LanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/components/dashboard/DocumentUpload.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'plan'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [documentName, plan, t]","fix":{"range":[3312,3329],"text":"[documentName, plan, t]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Progress } from '@/components/ui/progress';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Calendar } from '@/components/ui/calendar';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns';\nimport { CalendarIcon, Upload, FileText } from 'lucide-react';\nimport { COUNTRY_CONFIGS } from '@/config/countries';\nimport { useCountry } from '@/contexts/CountryContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { MAX_FILE_SIZES } from '@/utils/constants';\nimport { useUserPlan } from '@/hooks/useUserPlan';\n\ninterface DocumentUploadProps {\n  onDocumentUploaded: (document: Record<string, unknown>) => void;\n  onCancel: () => void;\n}\n\nexport const DocumentUpload: React.FC<DocumentUploadProps> = ({ onDocumentUploaded, onCancel }) => {\n  const { t } = useTranslation('common');\n  const { selectedCountryCode } = useCountry();\n  \n  const { plan } = useUserPlan();\n  \n  // Upload state\n  const [file, setFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadedFilePath, setUploadedFilePath] = useState<string | null>(null);\n  \n  // Form state\n  const [documentName, setDocumentName] = useState('');\n  const [documentType, setDocumentType] = useState('');\n  const [countryCode, setCountryCode] = useState(selectedCountryCode);\n  const [expirationDate, setExpirationDate] = useState<Date | null>(null);\n  \n  const [showForm, setShowForm] = useState(false);\n\n  const documentTypes = [\n    { key: 'realEstateDeed', value: t('documentTypes.realEstateDeed') },\n    { key: 'birthCertificate', value: t('documentTypes.birthCertificate') },\n    { key: 'insurancePolicy', value: t('documentTypes.insurancePolicy') },\n    { key: 'lastWill', value: t('documentTypes.lastWill') },\n    { key: 'employmentContract', value: t('documentTypes.employmentContract') },\n    { key: 'passport', value: t('documentTypes.passport') },\n    { key: 'drivingLicense', value: t('documentTypes.drivingLicense') },\n    { key: 'bankStatement', value: t('documentTypes.bankStatement') },\n    { key: 'investmentCertificate', value: t('documentTypes.investmentCertificate') },\n    { key: 'other', value: t('documentTypes.other') },\n  ];\n\n  const supportedCountries = Object.values(COUNTRY_CONFIGS);\n\n  const handleFileSelect = useCallback((selectedFile: File) => {\n    const maxFileSize = MAX_FILE_SIZES[plan];\n    \n    // Check file size\n    if (selectedFile.size > maxFileSize) {\n      const maxSizeMB = maxFileSize / (1024 * 1024);\n      toast.error(t('documentUpload.fileTooLarge', { maxSize: maxSizeMB }));\n      return;\n    }\n    \n    setFile(selectedFile);\n    if (!documentName) {\n      // Auto-set document name from filename\n      const nameWithoutExtension = selectedFile.name.replace(/\\.[^/.]+$/, '');\n      setDocumentName(nameWithoutExtension);\n    }\n  }, [documentName, t]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n     \n    e.preventDefault();\n    const droppedFile = e.dataTransfer.files[0];\n    if (droppedFile) {\n      handleFileSelect(droppedFile);\n    }\n  }, [handleFileSelect]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n     \n    e.preventDefault();\n  }, []);\n\n  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n     \n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      handleFileSelect(selectedFile);\n    }\n  }, [handleFileSelect]);\n\n  const uploadFile = async () => {\n    if (!file) return null;\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Create unique filename\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = `${fileName}`;\n\n      // Upload file to Supabase storage\n      const { data, error } = await supabase.storage\n        .from('documents')\n        .upload(filePath, file);\n\n      if (error) {\n        throw error;\n      }\n\n      setUploadProgress(100);\n      setUploadedFilePath(data.path);\n      setShowForm(true);\n      toast.success(t('documentUpload.fileUploadedSuccess'));\n      \n      return data.path;\n    } catch (error) {\n      console.error('Chyba pri nahrávaní súboru:', {\n        error,\n        fileName: file.name,\n        fileSize: file.size,\n        timestamp: new Date().toISOString()\n      });\n      \n      let errorMessage = t('documentUpload.fileUploadFailed');\n      if (error instanceof Error) {\n        if (error.message.includes('storage')) {\n          errorMessage = `${t('documentUpload.fileUploadFailed')}: Problém s úložiskom`;\n        } else if (error.message.includes('network')) {\n          errorMessage = `${t('documentUpload.fileUploadFailed')}: Skontrolujte internetové pripojenie`;\n        }\n      }\n      \n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleSaveDocument = async () => {\n    if (!uploadedFilePath || !documentName.trim() || !documentType) {\n      toast.error(t('documentUpload.fillRequiredFields'));\n      return;\n    }\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        toast.error(t('documentUpload.loginToSave'));\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('documents')\n        .insert({\n          user_id: user.id,\n          name: documentName.trim(),\n          type: documentType,\n          country_code: countryCode,\n          file_path: uploadedFilePath,\n          file_size: file?.size || 0,\n          mime_type: file?.type || '',\n          expiration_date: expirationDate ? format(expirationDate, 'yyyy-MM-dd') : null,\n        })\n        .select()\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success(t('documentUpload.saved'));\n      onDocumentUploaded(data);\n    } catch (error) {\n      console.error('Chyba pri ukladaní dokumentu:', {\n        error,\n        documentName: documentName.trim(),\n        documentType,\n        timestamp: new Date().toISOString()\n      });\n      \n      let errorMessage = t('documentUpload.failedSave');\n      if (error instanceof Error) {\n        if (error.message.includes('duplicate')) {\n          errorMessage = `${t('documentUpload.failedSave')}: Dokument s týmto názvom už existuje`;\n        } else if (error.message.includes('permission')) {\n          errorMessage = `${t('documentUpload.failedSave')}: Nedostatočné oprávnenia`;\n        }\n      }\n      \n      toast.error(errorMessage);\n    }\n  };\n\n  if (showForm) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <FileText className=\"mx-auto h-12 w-12 text-primary mb-4\" />\n          <h3 className=\"text-lg font-semibold\">{t('documentUpload.detailsTitle')}</h3>\n          <p className=\"text-sm text-muted-foreground\">{t('documentUpload.detailsSubtitle')}</p>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"documentName\">{t('dashboard.documentName')}</Label>\n            <Input\n              id=\"documentName\"\n              placeholder={t('documentUpload.namePlaceholder')}\n              value={documentName}\n              onChange={(e) => setDocumentName(e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"documentType\">{t('dashboard.documentType')}</Label>\n            <Select value={documentType} onValueChange={setDocumentType}>\n              <SelectTrigger>\n                <SelectValue placeholder={t('documentUpload.typePlaceholder')} />\n              </SelectTrigger>\n              <SelectContent>\n                {documentTypes.map((type) => (\n                  <SelectItem key={type.key} value={type.value}>\n                    {type.value}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"countryCode\">{t('dashboard.countryOfRelevance')}</Label>\n            <Select value={countryCode} onValueChange={setCountryCode}>\n              <SelectTrigger>\n                <SelectValue placeholder={t('documentUpload.countryPlaceholder')} />\n              </SelectTrigger>\n              <SelectContent>\n                {supportedCountries.map((country) => (\n                  <SelectItem key={country.code} value={country.code}>\n                    <div className=\"flex items-center gap-2\">\n                      <span>{country.flag}</span>\n                      <span>{country.name}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>{t('dashboard.expirationDate')}</Label>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className={cn(\n                    \"w-full justify-start text-left font-normal\",\n                    !expirationDate && \"text-muted-foreground\"\n                  )}\n                >\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                  {expirationDate ? format(expirationDate, \"PPP\") : <span>{t('documentUpload.pickDate')}</span>}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                <Calendar\n                  mode=\"single\"\n                  selected={expirationDate}\n                  onSelect={setExpirationDate}\n                  initialFocus\n                  className={cn(\"p-3 pointer-events-auto\")}\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 pt-4\">\n          <Button variant=\"outline\" onClick={onCancel} className=\"flex-1\">\n            {t('common.cancel')}\n          </Button>\n          <Button onClick={handleSaveDocument} className=\"flex-1\">\n            {t('dashboard.saveDocument')}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <Upload className=\"mx-auto h-12 w-12 text-primary mb-4\" />\n        <h3 className=\"text-lg font-semibold\">{t('documentUpload.title')}</h3>\n        <p className=\"text-sm text-muted-foreground\">{t('documentUpload.subtitle')}</p>\n      </div>\n\n      {!file && (\n        <div\n          className=\"border-2 border-dashed border-primary/20 rounded-lg p-8 text-center cursor-pointer hover:border-primary/40 transition-colors\"\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onClick={() => document.getElementById('file-input')?.click()}\n        >\n          <Upload className=\"mx-auto h-8 w-8 text-muted-foreground mb-4\" />\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            {t('dashboard.dragDropZone')}\n          </p>\n          <Button variant=\"outline\" size=\"sm\">\n            {t('documentUpload.browseFiles')}\n          </Button>\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            className=\"hidden\"\n            onChange={handleFileInputChange}\n            accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.txt\"\n          />\n        </div>\n      )}\n\n      {file && !isUploading && !uploadedFilePath && (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n            <FileText className=\"h-8 w-8 text-primary\" />\n            <div className=\"flex-1\">\n              <p className=\"font-medium text-sm\">{file.name}</p>\n              <p className=\"text-xs text-muted-foreground\">\n                {(file.size / 1024 / 1024).toFixed(2)} MB\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={() => setFile(null)} className=\"flex-1\">\n              {t('documentUpload.chooseDifferent')}\n            </Button>\n            <Button onClick={uploadFile} className=\"flex-1\">\n              {t('documentUpload.uploadButton')}\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {isUploading && (\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <p className=\"text-sm font-medium\">{t('dashboard.fileUploading')}</p>\n            <p className=\"text-xs text-muted-foreground\">{file?.name}</p>\n          </div>\n          <Progress value={uploadProgress} className=\"w-full\" />\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/components/dashboard/GuardianUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/components/dashboard/StrategicSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/contexts/CountryContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":12,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":12,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { getCurrentCountryConfig } from '@/config/countries';\n\ninterface CountryContextType {\n  selectedCountryCode: string;\n  setSelectedCountryCode: (countryCode: string) => void;\n}\n\nconst CountryContext = createContext<CountryContextType | undefined>(undefined);\n\nexport const useCountry = () => {\n  const context = useContext(CountryContext);\n  if (context === undefined) {\n    throw new Error('useCountry must be used within a CountryProvider');\n  }\n  return context;\n};\n\ninterface CountryProviderProps {\n  children: ReactNode;\n}\n\nexport const CountryProvider: React.FC<CountryProviderProps> = ({ children }) => {\n  // Get the initial country code safely - defer to useEffect for safety\n  const [selectedCountryCode, setSelectedCountryCode] = useState('DE');\n\n  // Use effect to set the correct country based on domain\n  React.useEffect(() => {\n     \n    try {\n      const currentConfig = getCurrentCountryConfig();\n      setSelectedCountryCode(currentConfig.code);\n    } catch (error) {\n      // Failed to get country config, using default\n      setSelectedCountryCode('DE');\n    }\n  }, []);\n\n  return (\n    <CountryContext.Provider value={{ selectedCountryCode, setSelectedCountryCode }}>\n      {children}\n    </CountryContext.Provider>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/hooks/useUserPlan.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/i18n/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/pages/AssetDetail.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAsset'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [assetId, isNewAsset, loadAsset]","fix":{"range":[2322,2343],"text":"[assetId, isNewAsset, loadAsset]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useSearchParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { CountrySelector } from '@/components/common/CountrySelector';\nimport { useCountry } from '@/contexts/CountryContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { ArrowLeft, Save, Home, Building, Car, Wallet } from 'lucide-react';\n\ninterface Asset {\n  id: string;\n  user_id: string;\n  name: string;\n  type: string;\n  address?: string;\n  property_registry_number?: string;\n  estimated_value?: number;\n  currency_code: string;\n  metadata: Record<string, unknown>;\n}\n\nconst CURRENCIES = [\n  { code: 'EUR', symbol: '€', name: 'Euro' },\n  { code: 'USD', symbol: '$', name: 'US Dollar' },\n  { code: 'GBP', symbol: '£', name: 'British Pound' },\n  { code: 'CZK', symbol: 'Kč', name: 'Czech Koruna' },\n  { code: 'PLN', symbol: 'zł', name: 'Polish Złoty' },\n];\n\nexport const AssetDetail: React.FC = () => {\n  const { t } = useTranslation('common');\n  const { assetId } = useParams<{ assetId: string }>();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { selectedCountryCode } = useCountry();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [asset, setAsset] = useState<Asset | null>(null);\n  \n  // Form state\n  const [formData, setFormData] = useState({\n    name: '',\n    type: searchParams.get('type') || 'RealEstate',\n    address: '',\n    property_registry_number: '',\n    estimated_value: '',\n    currency_code: 'EUR',\n    // Financial Account specific fields\n    account_type: '',\n    financial_institution: '',\n    account_number: '',\n    login_credentials: '',\n  });\n\n  const isNewAsset = assetId === 'new';\n\n  useEffect(() => {\n     \n    if (!isNewAsset && assetId) {\n      loadAsset();\n    }\n  }, [assetId, isNewAsset]);\n\n  const loadAsset = async () => {\n    if (!assetId) return;\n    \n    setIsLoading(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        navigate('/login');\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('assets')\n        .select('*')\n        .eq('id', assetId)\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      setAsset(data);\n      setFormData({\n        name: data.name || '',\n        type: data.type || 'RealEstate',\n        address: data.address || '',\n        property_registry_number: data.property_registry_number || '',\n        estimated_value: data.estimated_value?.toString() || '',\n        currency_code: data.currency_code || 'EUR',\n        // Financial Account specific fields\n        account_type: (data.metadata as Record<string, unknown>)?.account_type || '',\n        financial_institution: (data.metadata as Record<string, unknown>)?.financial_institution || '',\n        account_number: (data.metadata as Record<string, unknown>)?.account_number || '',\n        login_credentials: (data.metadata as Record<string, unknown>)?.login_credentials || '',\n      });\n    } catch (error) {\n      toast.error(t('assetDetail.errors.failedToLoad'));\n      navigate('/dashboard');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!formData.name.trim()) {\n      toast.error(t('assetDetail.errors.nameRequired'));\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        navigate('/login');\n        return;\n      }\n\n      const assetData = {\n        user_id: user.id,\n        name: formData.name.trim(),\n        type: formData.type,\n        address: formData.address.trim() || null,\n        property_registry_number: formData.property_registry_number.trim() || null,\n        estimated_value: formData.estimated_value ? parseFloat(formData.estimated_value) : null,\n        currency_code: formData.currency_code,\n        metadata: formData.type === 'FinancialAccount' ? {\n          account_type: formData.account_type,\n          financial_institution: formData.financial_institution,\n          account_number: formData.account_number,\n          login_credentials: formData.login_credentials,\n        } : {},\n      };\n\n      if (isNewAsset) {\n        const { error } = await supabase\n          .from('assets')\n          .insert([assetData]);\n\n        if (error) throw error;\n        \n        toast.success(t('assetDetail.messages.createdSuccessfully'));\n      } else {\n        const { error } = await supabase\n          .from('assets')\n          .update(assetData)\n          .eq('id', assetId)\n          .eq('user_id', user.id);\n\n        if (error) throw error;\n        \n        toast.success(t('assetDetail.messages.updatedSuccessfully'));\n      }\n\n      navigate('/dashboard');\n    } catch (error) {\n      toast.error(t('assetDetail.errors.failedToSave'));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getAssetIcon = (type: string) => {\n    switch (type) {\n      case 'RealEstate':\n        return <Home className=\"h-6 w-6\" />;\n      case 'Business':\n        return <Building className=\"h-6 w-6\" />;\n      case 'Vehicle':\n        return <Car className=\"h-6 w-6\" />;\n      case 'FinancialAccount':\n        return <Wallet className=\"h-6 w-6\" />;\n      default:\n        return <Home className=\"h-6 w-6\" />;\n    }\n  };\n\n  const getAssetTypeLabel = (type: string) => {\n    switch (type) {\n      case 'RealEstate':\n        return t('assetDetail.types.realEstate');\n      case 'Business':\n        return t('assetDetail.types.business');\n      case 'Vehicle':\n        return t('assetDetail.types.vehicle');\n      case 'FinancialAccount':\n        return t('assetDetail.types.financialAccount');\n      default:\n        return t('assetDetail.types.asset');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">{t('assetDetail.loading')}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() => navigate('/dashboard')}\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <div className=\"flex items-center gap-3\">\n          {getAssetIcon(formData.type)}\n          <div>\n            <h1 className=\"text-2xl font-bold\">\n              {isNewAsset ? t('assetDetail.title.new', { type: getAssetTypeLabel(formData.type) }) : formData.name}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {isNewAsset ? t('assetDetail.subtitle.new') : t('assetDetail.subtitle.edit')}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Asset Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>{t('assetDetail.sections.assetInformation')}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-8\">\n          {/* Basic Information Section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.basicInformation')}</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">{t('assetDetail.fields.assetName')} *</Label>\n                <Input\n                  id=\"name\"\n                  placeholder={t('assetDetail.placeholders.assetName')}\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.assetName')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">{t('assetDetail.fields.assetType')}</Label>\n                <Select\n                  value={formData.type}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"RealEstate\">{t('assetDetail.types.realEstate')}</SelectItem>\n                    <SelectItem value=\"Business\">{t('assetDetail.types.business')}</SelectItem>\n                    <SelectItem value=\"Vehicle\">{t('assetDetail.types.vehicle')}</SelectItem>\n                    <SelectItem value=\"FinancialAccount\">{t('assetDetail.types.financialAccount')}</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.assetType')}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Real Estate Specific Fields */}\n          {formData.type === 'RealEstate' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.propertyDetails')}</h3>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">{t('assetDetail.fields.propertyAddress')}</Label>\n                  <Textarea\n                    id=\"address\"\n                    placeholder={t('assetDetail.placeholders.propertyAddress')}\n                    value={formData.address}\n                    onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                    rows={3}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.propertyAddress')}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"registry\">{t('assetDetail.fields.propertyRegistryNumber')}</Label>\n                  <Input\n                    id=\"registry\"\n                    placeholder={t('assetDetail.placeholders.propertyRegistryNumber')}\n                    value={formData.property_registry_number}\n                    onChange={(e) => setFormData(prev => ({ ...prev, property_registry_number: e.target.value }))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.propertyRegistryNumber')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Financial Account Specific Fields */}\n          {formData.type === 'FinancialAccount' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.accountDetails')}</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"accountType\">{t('assetDetail.fields.accountType')}</Label>\n                  <Select\n                    value={formData.account_type}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, account_type: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('assetDetail.placeholders.selectAccountType')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Bank Account\">{t('assetDetail.accountTypes.bankAccount')}</SelectItem>\n                      <SelectItem value=\"Investment Portfolio\">{t('assetDetail.accountTypes.investmentPortfolio')}</SelectItem>\n                      <SelectItem value=\"Pension Fund\">{t('assetDetail.accountTypes.pensionFund')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.accountType')}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"institution\">{t('assetDetail.fields.financialInstitution')}</Label>\n                  <Input\n                    id=\"institution\"\n                    placeholder={t('assetDetail.placeholders.financialInstitution')}\n                    value={formData.financial_institution}\n                    onChange={(e) => setFormData(prev => ({ ...prev, financial_institution: e.target.value }))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.financialInstitution')}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"accountNumber\">{t('assetDetail.fields.accountNumber')}</Label>\n                <Input\n                  id=\"accountNumber\"\n                  placeholder={t('assetDetail.placeholders.accountNumber')}\n                  value={formData.account_number}\n                  onChange={(e) => setFormData(prev => ({ ...prev, account_number: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.accountNumber')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"credentials\">{t('assetDetail.fields.loginCredentials')}</Label>\n                <Textarea\n                  id=\"credentials\"\n                  placeholder={t('assetDetail.placeholders.loginCredentials')}\n                  value={formData.login_credentials}\n                  onChange={(e) => setFormData(prev => ({ ...prev, login_credentials: e.target.value }))}\n                  rows={3}\n                />\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                  <p className=\"text-xs text-yellow-800\">\n                    ⚠️ <strong>{t('assetDetail.securityWarning')}</strong> {t('assetDetail.securityWarningText')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Financial Details Section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.financialDetails')}</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"value\">{t('assetDetail.fields.estimatedValue')}</Label>\n                <Input\n                  id=\"value\"\n                  type=\"number\"\n                  placeholder={t('assetDetail.placeholders.estimatedValue')}\n                  value={formData.estimated_value}\n                  onChange={(e) => setFormData(prev => ({ ...prev, estimated_value: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.estimatedValue')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currency\">{t('assetDetail.fields.currency')}</Label>\n                <Select\n                  value={formData.currency_code}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, currency_code: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CURRENCIES.map((currency) => (\n                      <SelectItem key={currency.code} value={currency.code}>\n                        {currency.symbol} {currency.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.currency')}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end gap-4 pt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={() => navigate('/dashboard')}\n              disabled={isSaving}\n            >\n              {t('assetDetail.buttons.cancel')}\n            </Button>\n            <Button\n              onClick={handleSave}\n              disabled={isSaving}\n            >\n              {isSaving ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  {t('assetDetail.buttons.saving')}\n                </>\n              ) : (\n                <>\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  {isNewAsset ? t('assetDetail.buttons.createAsset') : t('assetDetail.buttons.updateAsset')}\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/pages/GuardianView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadGuardianData'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadGuardianData]","fix":{"range":[1468,1470],"text":"[loadGuardianData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { \n  Shield, \n  FileText, \n  Users, \n  Heart,\n  Star,\n  Download,\n  Eye,\n  Calendar,\n  Mail,\n  Phone,\n  MapPin\n} from 'lucide-react';\nimport { COUNTRY_CONFIGS } from '@/config/countries';\n\ninterface Document {\n  id: string;\n  name: string;\n  type: string;\n  country_code: string;\n  expiration_date?: string | null;\n  is_key_document?: boolean;\n}\n\ninterface Contact {\n  id: string;\n  name: string;\n  role: string;\n  email?: string;\n  phone_number?: string;\n}\n\ninterface Instructions {\n  funeral_wishes?: string;\n  digital_accounts_shutdown?: string;\n  messages_to_loved_ones?: string;\n}\n\nexport const GuardianView: React.FC = () => {\n  const { t } = useTranslation('common');\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [instructions, setInstructions] = useState<Instructions | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [guardianInfo, setGuardianInfo] = useState<Record<string, unknown> | null>(null);\n  const [userInfo, setUserInfo] = useState<string>('');\n\n  useEffect(() => {\n     \n    loadGuardianData();\n  }, []);\n\n  const loadGuardianData = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(t('guardianView.errors.pleaseLogin'));\n        return;\n      }\n\n      // For this demo, we'll load all data\n      // In a real application, you'd verify the user is an accepted guardian\n      // and only show data they have permission to see\n      \n      // Load key documents only\n      const { data: documentsData, error: docsError } = await supabase\n        .from('documents')\n        .select('*')\n        .eq('is_key_document', true);\n\n      if (docsError) {\n        // Error loading documents\n      } else {\n        setDocuments(documentsData || []);\n      }\n\n      // Load important contacts\n      const { data: contactsData, error: contactsError } = await supabase\n        .from('contacts')\n        .select('*');\n\n      if (contactsError) {\n        // Error loading contacts\n      } else {\n        setContacts(contactsData || []);\n      }\n\n      // Load instructions\n      const { data: instructionsData, error: instructionsError } = await supabase\n        .from('instructions')\n        .select('*')\n        .single();\n\n      if (instructionsError && instructionsError.code !== 'PGRST116') {\n        // Error loading instructions\n      } else {\n        setInstructions(instructionsData);\n      }\n\n      // Set placeholder user info\n      setUserInfo(t('guardianView.defaultUserName'));\n      \n    } catch (error) {\n      toast.error(t('guardianView.errors.failedToLoad'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCountryFlag = (countryCode: string) => {\n    const config = Object.values(COUNTRY_CONFIGS).find(c => c.code === countryCode);\n    return config?.flag || '🏳️';\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return t('guardianView.sections.keyDocuments.noExpiration');\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse text-center\">\n          <Shield className=\"h-8 w-8 text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">{t('guardianView.loading')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center w-20 h-20 rounded-full bg-primary/10 mx-auto\">\n          <Shield className=\"h-10 w-10 text-primary\" />\n        </div>\n        <div>\n          <h1 className=\"text-3xl font-bold\">{t('guardianView.title')}</h1>\n          <p className=\"text-muted-foreground\">\n            {t('guardianView.subtitle', { userName: userInfo })}\n          </p>\n        </div>\n        <Badge variant=\"heritage\" className=\"mx-auto\">\n          <Eye className=\"h-3 w-3 mr-1\" />\n          {t('guardianView.readOnlyAccess')}\n        </Badge>\n      </div>\n\n      {/* Key Documents */}\n      <Card variant=\"heritage\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FileText className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.keyDocuments.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.keyDocuments.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {documents.length > 0 ? (\n              documents.map((document) => (\n                <div key={document.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <FileText className=\"h-4 w-4 text-primary\" />\n                    <div>\n                      <h4 className=\"font-medium\">{document.name}</h4>\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <span>{document.type}</span>\n                        <span>•</span>\n                        <span className=\"flex items-center\">\n                          {getCountryFlag(document.country_code)}\n                          <span className=\"ml-1\">\n                            {COUNTRY_CONFIGS[document.country_code as keyof typeof COUNTRY_CONFIGS]?.name}\n                          </span>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right space-y-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      <Star className=\"h-3 w-3 mr-1\" />\n                      {t('guardianView.sections.keyDocuments.keyDocumentBadge')}\n                    </Badge>\n                    <p className=\"text-xs text-muted-foreground\">\n                      <Calendar className=\"h-3 w-3 inline mr-1\" />\n                      {t('guardianView.sections.keyDocuments.expires')}: {formatDate(document.expiration_date)}\n                    </p>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.keyDocuments.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Important Contacts */}\n      <Card variant=\"earth\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.importantContacts.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.importantContacts.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {contacts.length > 0 ? (\n              contacts.map((contact) => (\n                <div key={contact.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary/10\">\n                      <Users className=\"h-4 w-4 text-primary\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">{contact.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{contact.role}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right space-y-1 text-sm\">\n                    {contact.email && (\n                      <p className=\"flex items-center text-muted-foreground\">\n                        <Mail className=\"h-3 w-3 mr-1\" />\n                        {contact.email}\n                      </p>\n                    )}\n                    {contact.phone_number && (\n                      <p className=\"flex items-center text-muted-foreground\">\n                        <Phone className=\"h-3 w-3 mr-1\" />\n                        {contact.phone_number}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.importantContacts.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Final Wishes & Instructions */}\n      <Card variant=\"heritage\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Heart className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.finalWishes.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.finalWishes.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {/* Funeral Wishes */}\n            {instructions?.funeral_wishes && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.funeralWishes')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.funeral_wishes}</p>\n                </div>\n              </div>\n            )}\n\n            {/* Digital Accounts */}\n            {instructions?.digital_accounts_shutdown && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.digitalAccounts')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.digital_accounts_shutdown}</p>\n                </div>\n              </div>\n            )}\n\n            {/* Messages to Loved Ones */}\n            {instructions?.messages_to_loved_ones && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.messagesToLovedOnes')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.messages_to_loved_ones}</p>\n                </div>\n              </div>\n            )}\n\n            {!instructions && (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.finalWishes.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Guardian Information */}\n      <Card>\n        <CardContent className=\"text-center py-6\">\n          <Shield className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">\n            {t('guardianView.footer.guardianInfo')}\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            {t('guardianView.footer.securityNote')}\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/pages/InviteAcceptance.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInvitation'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [inviteToken, loadInvitation]","fix":{"range":[1163,1176],"text":"[inviteToken, loadInvitation]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { CheckCircle2, XCircle, Shield, User } from 'lucide-react';\n\ninterface GuardianInvitation {\n  id: string;\n  full_name: string;\n  relationship: string;\n  roles: string[];\n  invitation_status: string;\n  user_id: string;\n}\n\nexport const InviteAcceptance: React.FC = () => {\n  const { inviteToken } = useParams<{ inviteToken: string }>();\n  const navigate = useNavigate();\n  const { t } = useTranslation('common');\n  const [invitation, setInvitation] = useState<GuardianInvitation | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [inviterName, setInviterName] = useState<string>('');\n\n  useEffect(() => {\n     \n    loadInvitation();\n  }, [inviteToken]);\n\n  const loadInvitation = async () => {\n    if (!inviteToken) {\n      toast.error(t('inviteAcceptance.errors.invalidLink'));\n      navigate('/');\n      return;\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('guardians')\n        .select('*')\n        .eq('invitation_token', inviteToken)\n        .single();\n\n      if (error || !data) {\n        toast.error(t('inviteAcceptance.errors.notFound'));\n        navigate('/');\n        return;\n      }\n\n      if (data.invitation_status !== 'sent') {\n        toast.error(t('inviteAcceptance.errors.alreadyProcessed'));\n        navigate('/');\n        return;\n      }\n\n      setInvitation(data);\n      \n      // Get inviter's information (you might want to create a profiles table for this)\n      // For now, we'll use a placeholder\n      setInviterName(t('inviteAcceptance.defaultInviterName'));\n      \n    } catch (error) {\n      toast.error(t('inviteAcceptance.errors.failedToLoad'));\n      navigate('/');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAccept = async () => {\n    if (!invitation) return;\n    \n    setProcessing(true);\n    try {\n      const { error } = await supabase\n        .from('guardians')\n        .update({\n          invitation_status: 'accepted',\n          accepted_at: new Date().toISOString()\n        })\n        .eq('id', invitation.id);\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success(t('inviteAcceptance.messages.accepted'));\n      \n      // Redirect to guardian view or login\n      navigate('/guardian-view');\n      \n    } catch (error) {\n      toast.error(t('inviteAcceptance.errors.failedToAccept'));\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const handleDecline = async () => {\n    if (!invitation) return;\n    \n    setProcessing(true);\n    try {\n      const { error } = await supabase\n        .from('guardians')\n        .update({\n          invitation_status: 'declined'\n        })\n        .eq('id', invitation.id);\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success(t('inviteAcceptance.messages.declined'));\n      navigate('/');\n      \n    } catch (error) {\n      toast.error(t('inviteAcceptance.errors.failedToDecline'));\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse\">\n          <Shield className=\"h-8 w-8 text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">{t('inviteAcceptance.loading')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!invitation) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center p-6\">\n            <XCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">{t('inviteAcceptance.notFound.title')}</h2>\n            <p className=\"text-muted-foreground\">{t('inviteAcceptance.notFound.description')}</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted/20\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center pb-6\">\n          <div className=\"flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mx-auto mb-4\">\n            <Shield className=\"h-8 w-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl mb-2\">\n            {t('invite.title', { name: inviterName })}\n          </CardTitle>\n          <CardDescription className=\"text-base\">\n            {t('inviteAcceptance.subtitle')}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Guardian Role Details */}\n          <div className=\"bg-muted/50 p-4 rounded-lg space-y-3\">\n            <h3 className=\"font-semibold flex items-center\">\n              <User className=\"h-4 w-4 mr-2\" />\n              {t('inviteAcceptance.guardianRole.title')}\n            </h3>\n            <div className=\"space-y-2 text-sm\">\n              <p><strong>{t('inviteAcceptance.guardianRole.yourName')}</strong> {invitation.full_name}</p>\n              <p><strong>{t('inviteAcceptance.guardianRole.relationship')}</strong> {invitation.relationship}</p>\n              <div>\n                <strong>{t('inviteAcceptance.guardianRole.responsibilities')}</strong>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {invitation.roles.map((role, index) => (\n                    <Badge key={index} variant=\"heritage\" className=\"text-xs\">\n                      {role}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* What This Means */}\n          <div className=\"bg-primary/5 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-primary mb-2\">{t('inviteAcceptance.whatThisMeans.title')}</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>• {t('inviteAcceptance.whatThisMeans.point1')}</li>\n              <li>• {t('inviteAcceptance.whatThisMeans.point2')}</li>\n              <li>• {t('inviteAcceptance.whatThisMeans.point3')}</li>\n              <li>• {t('inviteAcceptance.whatThisMeans.point4')}</li>\n            </ul>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n            <Button \n              onClick={handleAccept}\n              disabled={processing}\n              className=\"flex-1\"\n              size=\"lg\"\n            >\n              <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n              {processing ? t('inviteAcceptance.buttons.processing') : t('inviteAcceptance.buttons.acceptRole')}\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={handleDecline}\n              disabled={processing}\n              className=\"flex-1\"\n              size=\"lg\"\n            >\n              <XCircle className=\"h-4 w-4 mr-2\" />\n              {t('inviteAcceptance.buttons.decline')}\n            </Button>\n          </div>\n\n          <p className=\"text-xs text-muted-foreground text-center\">\n            {t('inviteAcceptance.disclaimer')}\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/pages/Manual.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadContacts' and 'loadKeyDocuments'. Either include them or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadContacts, loadKeyDocuments]","fix":{"range":[2229,2231],"text":"[loadContacts, loadKeyDocuments]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';\nimport { Badge } from '@/components/ui/badge';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { Plus, User, Phone, Mail, Edit, Trash2, BookUser, FileText, Star, Heart, Trash, MessageSquare } from 'lucide-react';\n\ninterface Contact {\n  id: string;\n  name: string;\n  role: string;\n  phone_number?: string;\n  email?: string;\n  notes?: string;\n}\n\ninterface Document {\n  id: string;\n  name: string;\n  type: string;\n  country_code: string;\n  expiration_date?: string | null;\n  is_key_document: boolean;\n}\n\ninterface Instructions {\n  id: string;\n  funeral_wishes?: string;\n  digital_accounts_shutdown?: string;\n  messages_to_loved_ones?: string;\n}\n\nexport const Manual: React.FC = () => {\n  const { t } = useTranslation('common');\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [instructions, setInstructions] = useState<Instructions | null>(null);\n  const [isContactSheetOpen, setIsContactSheetOpen] = useState(false);\n  const [editingContact, setEditingContact] = useState<Contact | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isDocumentsLoading, setIsDocumentsLoading] = useState(true);\n  const [isInstructionsLoading, setIsInstructionsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  \n  // Form state\n  const [formData, setFormData] = useState({\n    name: '',\n    role: '',\n    phone_number: '',\n    email: '',\n    notes: '',\n  });\n\n  useEffect(() => {\n     \n    loadContacts();\n    loadKeyDocuments();\n    loadInstructions();\n  }, []);\n\n  const loadContacts = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('contacts')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        throw error;\n      }\n\n      setContacts(data || []);\n    } catch (error) {\n      toast.error(t('manual.contacts.errors.loadFailed'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      role: '',\n      phone_number: '',\n      email: '',\n      notes: '',\n    });\n    setEditingContact(null);\n  };\n\n  const handleAddContact = () => {\n    resetForm();\n    setIsContactSheetOpen(true);\n  };\n\n  const handleEditContact = (contact: Contact) => {\n    setEditingContact(contact);\n    setFormData({\n      name: contact.name,\n      role: contact.role,\n      phone_number: contact.phone_number || '',\n      email: contact.email || '',\n      notes: contact.notes || '',\n    });\n    setIsContactSheetOpen(true);\n  };\n\n  const handleSaveContact = async () => {\n    if (!formData.name.trim() || !formData.role.trim()) {\n      toast.error(t('manual.contacts.messages.nameAndRoleRequired'));\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        toast.error(t('manual.contacts.messages.loginRequired'));\n        return;\n      }\n\n      const contactData = {\n        user_id: user.id,\n        name: formData.name.trim(),\n        role: formData.role.trim(),\n        phone_number: formData.phone_number.trim() || null,\n        email: formData.email.trim() || null,\n        notes: formData.notes.trim() || null,\n      };\n\n      if (editingContact) {\n        const { error } = await supabase\n          .from('contacts')\n          .update(contactData)\n          .eq('id', editingContact.id)\n          .eq('user_id', user.id);\n\n        if (error) throw error;\n        toast.success(t('manual.contacts.messages.updated'));\n      } else {\n        const { error } = await supabase\n          .from('contacts')\n          .insert([contactData]);\n\n        if (error) throw error;\n        toast.success(t('manual.contacts.messages.added'));\n      }\n\n      setIsContactSheetOpen(false);\n      resetForm();\n      loadContacts();\n    } catch (error) {\n      toast.error(t('manual.contacts.errors.saveFailed'));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleDeleteContact = async (id: string) => {\n    try {\n      const { error } = await supabase\n        .from('contacts')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n\n      setContacts(prev => prev.filter(contact => contact.id !== id));\n      toast.success(t('manual.contacts.messages.deleted'));\n    } catch (error) {\n      toast.error(t('manual.contacts.errors.deleteFailed'));\n    }\n  };\n\n  const loadKeyDocuments = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('documents')\n        .select('*')\n        .eq('user_id', user.id)\n        .eq('is_key_document', true)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        throw error;\n      }\n\n      setDocuments(data || []);\n    } catch (error) {\n      toast.error(t('manual.documents.errors.loadFailed'));\n    } finally {\n      setIsDocumentsLoading(false);\n    }\n  };\n\n  const getCountryFlag = (countryCode: string) => {\n    // Simple flag mapping - in a real app you'd want a more comprehensive solution\n    const flags: { [key: string]: string } = {\n      'SK': '🇸🇰', 'CZ': '🇨🇿', 'DE': '🇩🇪', 'AT': '🇦🇹', 'HU': '🇭🇺',\n      'PL': '🇵🇱', 'IT': '🇮🇹', 'FR': '🇫🇷', 'ES': '🇪🇸', 'NL': '🇳🇱',\n      'BE': '🇧🇪', 'CH': '🇨🇭', 'US': '🇺🇸', 'GB': '🇬🇧', 'IE': '🇮🇪'\n    };\n    return flags[countryCode] || '🏳️';\n  };\n\n  const loadInstructions = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('instructions')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n\n      setInstructions(data);\n    } catch (error) {\n      console.error('Error loading instructions:', error);\n    } finally {\n      setIsInstructionsLoading(false);\n    }\n  };\n\n  const debouncedSaveInstructions = useCallback(\n    async (field: keyof Instructions, value: string) => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) return;\n\n        const instructionsData = {\n          user_id: user.id,\n          [field]: value.trim() || null,\n        };\n\n        if (instructions) {\n          const { error } = await supabase\n            .from('instructions')\n            .update(instructionsData)\n            .eq('id', instructions.id);\n\n          if (error) throw error;\n        } else {\n          const { data, error } = await supabase\n            .from('instructions')\n            .insert([instructionsData])\n            .select()\n            .single();\n\n          if (error) throw error;\n          setInstructions(data);\n        }\n      } catch (error) {\n    console.error(\"Error occurred:\", error);\n  }\n    },\n    [instructions]\n  );\n\n  const getExpirationStatus = (expirationDate: string | null) => {\n    if (!expirationDate) return null;\n    \n    const today = new Date();\n    const expiry = new Date(expirationDate);\n    const diffTime = expiry.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < 0) {\n      return { text: t('manual.documents.expiration.expired'), variant: 'destructive' as const };\n    } else if (diffDays <= 30) {\n      return { text: t('manual.documents.expiration.expiresSoon'), variant: 'destructive' as const };\n    } else if (diffDays <= 90) {\n      return { text: t('manual.documents.expiration.expiring'), variant: 'secondary' as const };\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <BookUser className=\"h-8 w-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\">{t('manual.title')}</h1>\n          <p className=\"text-muted-foreground\">\n            {t('manual.subtitle')}\n          </p>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"contacts\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"contacts\">{t('manual.tabs.contacts')}</TabsTrigger>\n          <TabsTrigger value=\"documents\">{t('manual.tabs.documents')}</TabsTrigger>\n          <TabsTrigger value=\"instructions\">{t('manual.tabs.instructions')}</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"contacts\" className=\"space-y-6\">\n          {/* Add Contact Button */}\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">{t('manual.contacts.title')}</h2>\n              <p className=\"text-muted-foreground\">\n                {t('manual.contacts.description')}\n              </p>\n            </div>\n            <Sheet open={isContactSheetOpen} onOpenChange={setIsContactSheetOpen}>\n              <SheetTrigger asChild>\n                <Button onClick={handleAddContact}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  {t('manual.contacts.addContact')}\n                </Button>\n              </SheetTrigger>\n              <SheetContent>\n                <SheetHeader>\n                  <SheetTitle>\n                    {editingContact ? t('manual.contacts.form.editTitle') : t('manual.contacts.form.addTitle')}\n                  </SheetTitle>\n                  <SheetDescription>\n                    {t('manual.contacts.form.description')}\n                  </SheetDescription>\n                </SheetHeader>\n\n                <div className=\"space-y-4 mt-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contactName\">{t('manual.contacts.form.nameLabel')}</Label>\n                    <Input\n                      id=\"contactName\"\n                      placeholder={t('manual.contacts.form.namePlaceholder')}\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"role\">{t('manual.contacts.form.roleLabel')}</Label>\n                    <Input\n                      id=\"role\"\n                      placeholder={t('manual.contacts.form.rolePlaceholder')}\n                      value={formData.role}\n                      onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">{t('manual.contacts.form.phoneLabel')}</Label>\n                    <Input\n                      id=\"phone\"\n                      placeholder={t('manual.contacts.form.phonePlaceholder')}\n                      value={formData.phone_number}\n                      onChange={(e) => setFormData(prev => ({ ...prev, phone_number: e.target.value }))}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">{t('manual.contacts.form.emailLabel')}</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder={t('manual.contacts.form.emailPlaceholder')}\n                      value={formData.email}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"notes\">{t('manual.contacts.form.notesLabel')}</Label>\n                    <Textarea\n                      id=\"notes\"\n                      placeholder={t('manual.contacts.form.notesPlaceholder')}\n                      value={formData.notes}\n                      onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"flex gap-3 pt-4\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setIsContactSheetOpen(false)}\n                      className=\"flex-1\"\n                      disabled={isSaving}\n                    >\n                      {t('manual.contacts.form.cancel')}\n                    </Button>\n                    <Button\n                      onClick={handleSaveContact}\n                      className=\"flex-1\"\n                      disabled={isSaving}\n                    >\n                      {isSaving ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          {t('manual.contacts.form.saving')}\n                        </>\n                      ) : (\n                        editingContact ? t('manual.contacts.form.updateButton') : t('manual.contacts.form.addButton')\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n\n          {/* Contacts List */}\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">{t('manual.contacts.loading')}</p>\n              </div>\n            </div>\n          ) : contacts.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">{t('manual.contacts.empty.title')}</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {t('manual.contacts.empty.description')}\n                </p>\n                <Button onClick={handleAddContact}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  {t('manual.contacts.addFirstContact')}\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {contacts.map((contact) => (\n                <Card key={contact.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <User className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">{contact.name}</CardTitle>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {contact.role}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {contact.phone_number && (\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{contact.phone_number}</span>\n                      </div>\n                    )}\n                    {contact.email && (\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"truncate\">{contact.email}</span>\n                      </div>\n                    )}\n                    {contact.notes && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {contact.notes}\n                      </p>\n                    )}\n                    \n                    <div className=\"flex gap-2 pt-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEditContact(contact)}\n                        className=\"flex-1\"\n                      >\n                        <Edit className=\"mr-1 h-3 w-3\" />\n                        {t('manual.contacts.card.edit')}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteContact(contact.id)}\n                        className=\"text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"documents\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">{t('manual.documents.title')}</h2>\n              <p className=\"text-muted-foreground\">\n                {t('manual.documents.description')}\n              </p>\n            </div>\n          </div>\n\n          {/* Key Documents List */}\n          {isDocumentsLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">{t('manual.documents.loading')}</p>\n              </div>\n            </div>\n          ) : documents.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">{t('manual.documents.empty.title')}</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {t('manual.documents.empty.description')}\n                </p>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Star className=\"mr-1 h-3 w-3\" />\n                  {t('manual.documents.empty.tip')}\n                </Badge>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {documents.map((document) => (\n                <Card key={document.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <FileText className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">{document.name}</CardTitle>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {document.type}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-lg\">{getCountryFlag(document.country_code)}</span>\n                        <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {getExpirationStatus(document.expiration_date) && (\n                      <Badge \n                        variant={getExpirationStatus(document.expiration_date)!.variant}\n                        className=\"text-xs mb-2\"\n                      >\n                        {getExpirationStatus(document.expiration_date)!.text}\n                      </Badge>\n                    )}\n                    <p className=\"text-xs text-muted-foreground\">\n                      {t('manual.documents.card.essentialNote')}\n                    </p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"instructions\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">{t('manual.instructions.title')}</h2>\n              <p className=\"text-muted-foreground\">\n                {t('manual.instructions.description')}\n              </p>\n            </div>\n          </div>\n\n          {isInstructionsLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">{t('manual.instructions.loading')}</p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {/* Funeral Wishes */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Heart className=\"h-5 w-5 text-primary\" />\n                    {t('manual.instructions.funeral.title')}\n                  </CardTitle>\n                  <CardDescription>\n                    {t('manual.instructions.funeral.description')}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Textarea\n                    placeholder={t('manual.instructions.funeral.placeholder')}\n                    value={instructions?.funeral_wishes || ''}\n                    onChange={(e) => {\n                      const value = e.target.value;\n                      setInstructions(prev => prev ? { ...prev, funeral_wishes: value } : { id: '', funeral_wishes: value });\n                      debouncedSaveInstructions('funeral_wishes', value);\n                    }}\n                    rows={4}\n                    className=\"resize-none\"\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Digital Accounts */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Trash className=\"h-5 w-5 text-primary\" />\n                    {t('manual.instructions.digitalAccounts.title')}\n                  </CardTitle>\n                  <CardDescription>\n                    {t('manual.instructions.digitalAccounts.description')}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Textarea\n                    placeholder={t('manual.instructions.digitalAccounts.placeholder')}\n                    value={instructions?.digital_accounts_shutdown || ''}\n                    onChange={(e) => {\n                      const value = e.target.value;\n                      setInstructions(prev => prev ? { ...prev, digital_accounts_shutdown: value } : { id: '', digital_accounts_shutdown: value });\n                      debouncedSaveInstructions('digital_accounts_shutdown', value);\n                    }}\n                    rows={4}\n                    className=\"resize-none\"\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Messages to Loved Ones */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <MessageSquare className=\"h-5 w-5 text-primary\" />\n                    {t('manual.instructions.messages.title')}\n                  </CardTitle>\n                  <CardDescription>\n                    {t('manual.instructions.messages.description')}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Textarea\n                    placeholder={t('manual.instructions.messages.placeholder')}\n                    value={instructions?.messages_to_loved_ones || ''}\n                    onChange={(e) => {\n                      const value = e.target.value;\n                      setInstructions(prev => prev ? { ...prev, messages_to_loved_ones: value } : { id: '', messages_to_loved_ones: value });\n                      debouncedSaveInstructions('messages_to_loved_ones', value);\n                    }}\n                    rows={6}\n                    className=\"resize-none\"\n                  />\n                </CardContent>\n              </Card>\n\n              <div className=\"text-center py-4\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Star className=\"mr-1 h-3 w-3\" />\n                  {t('manual.instructions.autoSaveNote')}\n                </Badge>\n              </div>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/pages/Will.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadWill'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadWill]","fix":{"range":[2243,2245],"text":"[loadWill]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useGenderAwareTranslation } from '@/i18n/useGenderAwareTranslation';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { FileSignature, Upload, MapPin, User, Save } from 'lucide-react';\nimport { DocumentUpload } from '@/components/dashboard/DocumentUpload';\n\ninterface Will {\n  id: string;\n  status: string;\n  document_path?: string;\n  physical_location?: string;\n  executor_contact_id?: string;\n  notes?: string;\n}\n\ninterface Contact {\n  id: string;\n  name: string;\n  role: string;\n}\n\nexport const Will: React.FC = () => {\n  const { t } = useGenderAwareTranslation('common');\n  const [will, setWill] = useState<Will | null>(null);\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showUpload, setShowUpload] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    status: 'notStarted', // Use key instead of translated value\n    physical_location: '',\n    executor_contact_id: '',\n    notes: '',\n  });\n\n  const statusOptions = [\n    { key: 'notStarted', label: t('will.status.notStarted') },\n    { key: 'inPreparation', label: t('will.status.inPreparation') },\n    { key: 'completedSigned', label: t('will.status.completedSigned') },\n    { key: 'withNotary', label: t('will.status.withNotary') }\n  ];\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'notStarted': return 'secondary';\n      case 'inPreparation': return 'default';\n      case 'completedSigned': return 'default';\n      case 'withNotary': return 'default';\n      default: return 'secondary';\n    }\n  };\n\n  useEffect(() => {\n     \n    loadWill();\n    loadContacts();\n  }, []);\n\n  const loadWill = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('wills')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n\n      if (data) {\n        setWill(data);\n        setFormData({\n          status: data.status,\n          physical_location: data.physical_location || '',\n          executor_contact_id: data.executor_contact_id || '',\n          notes: data.notes || '',\n        });\n      }\n    } catch (error) {\n      toast.error(t('will.errors.failedToLoad'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadContacts = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('contacts')\n        .select('id, name, role')\n        .eq('user_id', user.id)\n        .order('name');\n\n      if (error) throw error;\n      setContacts(data || []);\n    } catch (error) {\n      // Error loading contacts\n    }\n  };\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        toast.error(t('will.errors.mustBeLoggedIn'));\n        return;\n      }\n\n      const willData = {\n        user_id: user.id,\n        status: formData.status,\n        physical_location: formData.physical_location.trim() || null,\n        executor_contact_id: formData.executor_contact_id || null,\n        notes: formData.notes.trim() || null,\n      };\n\n      if (will) {\n        const { error } = await supabase\n          .from('wills')\n          .update(willData)\n          .eq('id', will.id);\n\n        if (error) throw error;\n      } else {\n        const { data, error } = await supabase\n          .from('wills')\n          .insert([willData])\n          .select()\n          .single();\n\n        if (error) throw error;\n        setWill(data);\n      }\n\n      toast.success(t('will.messages.savedSuccessfully'));\n      loadWill();\n    } catch (error) {\n      toast.error(t('will.errors.failedToSave'));\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleDocumentUploaded = (document: Record<string, unknown>) => {\n    setShowUpload(false);\n    loadWill();\n    toast.success(t('will.messages.documentUploaded'));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">{t('will.loading')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <FileSignature className=\"h-8 w-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\">{t('will.title')}</h1>\n          <p className=\"text-muted-foreground\">\n            {t('will.subtitle')}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Status & Basic Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileSignature className=\"h-5 w-5\" />\n              {t('will.sections.statusInfo')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Current Status */}\n            <div className=\"space-y-2\">\n              <Label>{t('will.fields.currentStatus')}</Label>\n              <div className=\"flex items-center gap-3\">\n                <Select \n                  value={formData.status} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, status: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {statusOptions.map((status) => (\n                      <SelectItem key={status.key} value={status.key}>\n                        {status.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Badge variant={getStatusVariant(formData.status)}>\n                  {statusOptions.find(opt => opt.key === formData.status)?.label || formData.status}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                {t('will.descriptions.statusDescription')}\n              </p>\n            </div>\n\n            {/* Physical Location */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"location\">{t('will.fields.physicalLocation')}</Label>\n              <Input\n                id=\"location\"\n                placeholder={t('will.placeholders.physicalLocation')}\n                value={formData.physical_location}\n                onChange={(e) => setFormData(prev => ({ ...prev, physical_location: e.target.value }))}\n              />\n              <p className=\"text-sm text-muted-foreground\">\n                {t('will.descriptions.physicalLocationDescription')}\n              </p>\n            </div>\n\n            {/* Executor Contact */}\n            <div className=\"space-y-2\">\n              <Label>{t('will.fields.executorContact')}</Label>\n              <Select\n                value={formData.executor_contact_id}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, executor_contact_id: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder={t('will.placeholders.selectContact')} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">{t('will.options.noContactSelected')}</SelectItem>\n                  {contacts.map((contact) => (\n                    <SelectItem key={contact.id} value={contact.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4\" />\n                        <span>{contact.name}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {contact.role}\n                        </Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <p className=\"text-sm text-muted-foreground\">\n                {t('will.descriptions.executorDescription')}\n              </p>\n            </div>\n\n            {/* Notes */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notes\">{t('will.fields.additionalNotes')}</Label>\n              <Textarea\n                id=\"notes\"\n                placeholder={t('will.placeholders.additionalNotes')}\n                value={formData.notes}\n                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                rows={3}\n              />\n            </div>\n\n            <Button onClick={handleSave} disabled={isSaving} className=\"w-full\">\n              {isSaving ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  {t('will.buttons.saving')}\n                </>\n              ) : (\n                <>\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  {t('will.buttons.saveWillInfo')}\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Document Upload */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Upload className=\"h-5 w-5\" />\n              {t('will.sections.willDocument')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {will?.document_path ? (\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <FileSignature className=\"h-4 w-4 text-primary\" />\n                    <span className=\"font-medium\">{t('will.document.uploaded')}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('will.document.uploadedDescription')}\n                  </p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowUpload(true)}\n                  className=\"w-full\"\n                >\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  {t('will.buttons.uploadNewVersion')}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"text-center py-8\">\n                  <Upload className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"font-medium mb-2\">{t('will.document.noDocument')}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    {t('will.document.noDocumentDescription')}\n                  </p>\n                  <Button onClick={() => setShowUpload(true)}>\n                    <Upload className=\"mr-2 h-4 w-4\" />\n                    {t('will.buttons.uploadDocument')}\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {showUpload && (\n              <div className=\"mt-4\">\n                <DocumentUpload\n                  onDocumentUploaded={handleDocumentUploaded}\n                  onCancel={() => setShowUpload(false)}\n                />\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Will;","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-catch-improvement/utils/currency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/components/dashboard/DocumentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/components/dashboard/DocumentUpload.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'plan'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [documentName, plan, t]","fix":{"range":[3312,3329],"text":"[documentName, plan, t]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Progress } from '@/components/ui/progress';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Calendar } from '@/components/ui/calendar';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns';\nimport { CalendarIcon, Upload, FileText } from 'lucide-react';\nimport { COUNTRY_CONFIGS } from '@/config/countries';\nimport { useCountry } from '@/contexts/CountryContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { MAX_FILE_SIZES } from '@/utils/constants';\nimport { useUserPlan } from '@/hooks/useUserPlan';\n\ninterface DocumentUploadProps {\n  onDocumentUploaded: (document: Record<string, unknown>) => void;\n  onCancel: () => void;\n}\n\nexport const DocumentUpload: React.FC<DocumentUploadProps> = ({ onDocumentUploaded, onCancel }) => {\n  const { t } = useTranslation('common');\n  const { selectedCountryCode } = useCountry();\n  \n  const { plan } = useUserPlan();\n  \n  // Upload state\n  const [file, setFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadedFilePath, setUploadedFilePath] = useState<string | null>(null);\n  \n  // Form state\n  const [documentName, setDocumentName] = useState('');\n  const [documentType, setDocumentType] = useState('');\n  const [countryCode, setCountryCode] = useState(selectedCountryCode);\n  const [expirationDate, setExpirationDate] = useState<Date | null>(null);\n  \n  const [showForm, setShowForm] = useState(false);\n\n  const documentTypes = [\n    { key: 'realEstateDeed', value: t('documentTypes.realEstateDeed') },\n    { key: 'birthCertificate', value: t('documentTypes.birthCertificate') },\n    { key: 'insurancePolicy', value: t('documentTypes.insurancePolicy') },\n    { key: 'lastWill', value: t('documentTypes.lastWill') },\n    { key: 'employmentContract', value: t('documentTypes.employmentContract') },\n    { key: 'passport', value: t('documentTypes.passport') },\n    { key: 'drivingLicense', value: t('documentTypes.drivingLicense') },\n    { key: 'bankStatement', value: t('documentTypes.bankStatement') },\n    { key: 'investmentCertificate', value: t('documentTypes.investmentCertificate') },\n    { key: 'other', value: t('documentTypes.other') },\n  ];\n\n  const supportedCountries = Object.values(COUNTRY_CONFIGS);\n\n  const handleFileSelect = useCallback((selectedFile: File) => {\n    const maxFileSize = MAX_FILE_SIZES[plan];\n    \n    // Check file size\n    if (selectedFile.size > maxFileSize) {\n      const maxSizeMB = maxFileSize / (1024 * 1024);\n      toast.error(t('documentUpload.fileTooLarge', { maxSize: maxSizeMB }));\n      return;\n    }\n    \n    setFile(selectedFile);\n    if (!documentName) {\n      // Auto-set document name from filename\n      const nameWithoutExtension = selectedFile.name.replace(/\\.[^/.]+$/, '');\n      setDocumentName(nameWithoutExtension);\n    }\n  }, [documentName, t]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n     \n    e.preventDefault();\n    const droppedFile = e.dataTransfer.files[0];\n    if (droppedFile) {\n      handleFileSelect(droppedFile);\n    }\n  }, [handleFileSelect]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n     \n    e.preventDefault();\n  }, []);\n\n  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n     \n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      handleFileSelect(selectedFile);\n    }\n  }, [handleFileSelect]);\n\n  const uploadFile = async () => {\n    if (!file) return null;\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Create unique filename\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = `${fileName}`;\n\n      // Upload file to Supabase storage\n      const { data, error } = await supabase.storage\n        .from('documents')\n        .upload(filePath, file);\n\n      if (error) {\n        throw error;\n      }\n\n      setUploadProgress(100);\n      setUploadedFilePath(data.path);\n      setShowForm(true);\n      toast.success(t('documentUpload.fileUploadedSuccess'));\n      \n      return data.path;\n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Aplikácia] Chyba pri operácia:', {\n        timestamp,\n        operation: 'uploadFile',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri operácia.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleSaveDocument = async () => {\n    if (!uploadedFilePath || !documentName.trim() || !documentType) {\n      toast.error(t('documentUpload.fillRequiredFields'));\n      return;\n    }\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        toast.error(t('documentUpload.loginToSave'));\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('documents')\n        .insert({\n          user_id: user.id,\n          name: documentName.trim(),\n          type: documentType,\n          country_code: countryCode,\n          file_path: uploadedFilePath,\n          file_size: file?.size || 0,\n          mime_type: file?.type || '',\n          expiration_date: expirationDate ? format(expirationDate, 'yyyy-MM-dd') : null,\n        })\n        .select()\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success(t('documentUpload.saved'));\n      onDocumentUploaded(data);\n    } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = (error as Error)?.message || 'Neznáma chyba';\n      const errorCode = (error as { code?: string })?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Aplikácia] Chyba pri operácia:', {\n        timestamp,\n        operation: 'handleSaveDocument',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: (error as Error)?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri operácia.';\n      \n      // Špecifické správy podľa typu chyby\n      if (errorCode === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (errorMessage.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (errorMessage.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (errorMessage.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    }\n  };\n\n  if (showForm) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <FileText className=\"mx-auto h-12 w-12 text-primary mb-4\" />\n          <h3 className=\"text-lg font-semibold\">{t('documentUpload.detailsTitle')}</h3>\n          <p className=\"text-sm text-muted-foreground\">{t('documentUpload.detailsSubtitle')}</p>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"documentName\">{t('dashboard.documentName')}</Label>\n            <Input\n              id=\"documentName\"\n              placeholder={t('documentUpload.namePlaceholder')}\n              value={documentName}\n              onChange={(e) => setDocumentName(e.target.value)}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"documentType\">{t('dashboard.documentType')}</Label>\n            <Select value={documentType} onValueChange={setDocumentType}>\n              <SelectTrigger>\n                <SelectValue placeholder={t('documentUpload.typePlaceholder')} />\n              </SelectTrigger>\n              <SelectContent>\n                {documentTypes.map((type) => (\n                  <SelectItem key={type.key} value={type.value}>\n                    {type.value}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"countryCode\">{t('dashboard.countryOfRelevance')}</Label>\n            <Select value={countryCode} onValueChange={setCountryCode}>\n              <SelectTrigger>\n                <SelectValue placeholder={t('documentUpload.countryPlaceholder')} />\n              </SelectTrigger>\n              <SelectContent>\n                {supportedCountries.map((country) => (\n                  <SelectItem key={country.code} value={country.code}>\n                    <div className=\"flex items-center gap-2\">\n                      <span>{country.flag}</span>\n                      <span>{country.name}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>{t('dashboard.expirationDate')}</Label>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className={cn(\n                    \"w-full justify-start text-left font-normal\",\n                    !expirationDate && \"text-muted-foreground\"\n                  )}\n                >\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                  {expirationDate ? format(expirationDate, \"PPP\") : <span>{t('documentUpload.pickDate')}</span>}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                <Calendar\n                  mode=\"single\"\n                  selected={expirationDate}\n                  onSelect={setExpirationDate}\n                  initialFocus\n                  className={cn(\"p-3 pointer-events-auto\")}\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 pt-4\">\n          <Button variant=\"outline\" onClick={onCancel} className=\"flex-1\">\n            {t('common.cancel')}\n          </Button>\n          <Button onClick={handleSaveDocument} className=\"flex-1\">\n            {t('dashboard.saveDocument')}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <Upload className=\"mx-auto h-12 w-12 text-primary mb-4\" />\n        <h3 className=\"text-lg font-semibold\">{t('documentUpload.title')}</h3>\n        <p className=\"text-sm text-muted-foreground\">{t('documentUpload.subtitle')}</p>\n      </div>\n\n      {!file && (\n        <div\n          className=\"border-2 border-dashed border-primary/20 rounded-lg p-8 text-center cursor-pointer hover:border-primary/40 transition-colors\"\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onClick={() => document.getElementById('file-input')?.click()}\n        >\n          <Upload className=\"mx-auto h-8 w-8 text-muted-foreground mb-4\" />\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            {t('dashboard.dragDropZone')}\n          </p>\n          <Button variant=\"outline\" size=\"sm\">\n            {t('documentUpload.browseFiles')}\n          </Button>\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            className=\"hidden\"\n            onChange={handleFileInputChange}\n            accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.txt\"\n          />\n        </div>\n      )}\n\n      {file && !isUploading && !uploadedFilePath && (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n            <FileText className=\"h-8 w-8 text-primary\" />\n            <div className=\"flex-1\">\n              <p className=\"font-medium text-sm\">{file.name}</p>\n              <p className=\"text-xs text-muted-foreground\">\n                {(file.size / 1024 / 1024).toFixed(2)} MB\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={() => setFile(null)} className=\"flex-1\">\n              {t('documentUpload.chooseDifferent')}\n            </Button>\n            <Button onClick={uploadFile} className=\"flex-1\">\n              {t('documentUpload.uploadButton')}\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {isUploading && (\n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <p className=\"text-sm font-medium\">{t('dashboard.fileUploading')}</p>\n            <p className=\"text-xs text-muted-foreground\">{file?.name}</p>\n          </div>\n          <Progress value={uploadProgress} className=\"w-full\" />\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/components/dashboard/GuardianCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/components/dashboard/GuardianUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/components/dashboard/StrategicSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/pages/AssetDetail.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAsset'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [assetId, isNewAsset, loadAsset]","fix":{"range":[2322,2343],"text":"[assetId, isNewAsset, loadAsset]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useSearchParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { CountrySelector } from '@/components/common/CountrySelector';\nimport { useCountry } from '@/contexts/CountryContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { ArrowLeft, Save, Home, Building, Car, Wallet } from 'lucide-react';\n\ninterface Asset {\n  id: string;\n  user_id: string;\n  name: string;\n  type: string;\n  address?: string;\n  property_registry_number?: string;\n  estimated_value?: number;\n  currency_code: string;\n  metadata: Record<string, unknown>;\n}\n\nconst CURRENCIES = [\n  { code: 'EUR', symbol: '€', name: 'Euro' },\n  { code: 'USD', symbol: '$', name: 'US Dollar' },\n  { code: 'GBP', symbol: '£', name: 'British Pound' },\n  { code: 'CZK', symbol: 'Kč', name: 'Czech Koruna' },\n  { code: 'PLN', symbol: 'zł', name: 'Polish Złoty' },\n];\n\nexport const AssetDetail: React.FC = () => {\n  const { t } = useTranslation('common');\n  const { assetId } = useParams<{ assetId: string }>();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { selectedCountryCode } = useCountry();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [asset, setAsset] = useState<Asset | null>(null);\n  \n  // Form state\n  const [formData, setFormData] = useState({\n    name: '',\n    type: searchParams.get('type') || 'RealEstate',\n    address: '',\n    property_registry_number: '',\n    estimated_value: '',\n    currency_code: 'EUR',\n    // Financial Account specific fields\n    account_type: '',\n    financial_institution: '',\n    account_number: '',\n    login_credentials: '',\n  });\n\n  const isNewAsset = assetId === 'new';\n\n  useEffect(() => {\n     \n    if (!isNewAsset && assetId) {\n      loadAsset();\n    }\n  }, [assetId, isNewAsset]);\n\n  const loadAsset = async () => {\n    if (!assetId) return;\n    \n    setIsLoading(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        navigate('/login');\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('assets')\n        .select('*')\n        .eq('id', assetId)\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      setAsset(data);\n      setFormData({\n        name: data.name || '',\n        type: data.type || 'RealEstate',\n        address: data.address || '',\n        property_registry_number: data.property_registry_number || '',\n        estimated_value: data.estimated_value?.toString() || '',\n        currency_code: data.currency_code || 'EUR',\n        // Financial Account specific fields\n        account_type: (data.metadata as Record<string, unknown>)?.account_type || '',\n        financial_institution: (data.metadata as Record<string, unknown>)?.financial_institution || '',\n        account_number: (data.metadata as Record<string, unknown>)?.account_number || '',\n        login_credentials: (data.metadata as Record<string, unknown>)?.login_credentials || '',\n      });\n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Detail majetku] Chyba pri načítanie majetku:', {\n        timestamp,\n        operation: 'loadAsset',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri načítanie majetku.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!formData.name.trim()) {\n      toast.error(t('assetDetail.errors.nameRequired'));\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        navigate('/login');\n        return;\n      }\n\n      const assetData = {\n        user_id: user.id,\n        name: formData.name.trim(),\n        type: formData.type,\n        address: formData.address.trim() || null,\n        property_registry_number: formData.property_registry_number.trim() || null,\n        estimated_value: formData.estimated_value ? parseFloat(formData.estimated_value) : null,\n        currency_code: formData.currency_code,\n        metadata: formData.type === 'FinancialAccount' ? {\n          account_type: formData.account_type,\n          financial_institution: formData.financial_institution,\n          account_number: formData.account_number,\n          login_credentials: formData.login_credentials,\n        } : {},\n      };\n\n      if (isNewAsset) {\n        const { error } = await supabase\n          .from('assets')\n          .insert([assetData]);\n\n        if (error) throw error;\n        \n        toast.success(t('assetDetail.messages.createdSuccessfully'));\n      } else {\n        const { error } = await supabase\n          .from('assets')\n          .update(assetData)\n          .eq('id', assetId)\n          .eq('user_id', user.id);\n\n        if (error) throw error;\n        \n        toast.success(t('assetDetail.messages.updatedSuccessfully'));\n      }\n\n      navigate('/dashboard');\n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Detail majetku] Chyba pri uloženie majetku:', {\n        timestamp,\n        operation: 'handleSave',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri uloženie majetku.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getAssetIcon = (type: string) => {\n    switch (type) {\n      case 'RealEstate':\n        return <Home className=\"h-6 w-6\" />;\n      case 'Business':\n        return <Building className=\"h-6 w-6\" />;\n      case 'Vehicle':\n        return <Car className=\"h-6 w-6\" />;\n      case 'FinancialAccount':\n        return <Wallet className=\"h-6 w-6\" />;\n      default:\n        return <Home className=\"h-6 w-6\" />;\n    }\n  };\n\n  const getAssetTypeLabel = (type: string) => {\n    switch (type) {\n      case 'RealEstate':\n        return t('assetDetail.types.realEstate');\n      case 'Business':\n        return t('assetDetail.types.business');\n      case 'Vehicle':\n        return t('assetDetail.types.vehicle');\n      case 'FinancialAccount':\n        return t('assetDetail.types.financialAccount');\n      default:\n        return t('assetDetail.types.asset');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">{t('assetDetail.loading')}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() => navigate('/dashboard')}\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <div className=\"flex items-center gap-3\">\n          {getAssetIcon(formData.type)}\n          <div>\n            <h1 className=\"text-2xl font-bold\">\n              {isNewAsset ? t('assetDetail.title.new', { type: getAssetTypeLabel(formData.type) }) : formData.name}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {isNewAsset ? t('assetDetail.subtitle.new') : t('assetDetail.subtitle.edit')}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Asset Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>{t('assetDetail.sections.assetInformation')}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-8\">\n          {/* Basic Information Section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.basicInformation')}</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">{t('assetDetail.fields.assetName')} *</Label>\n                <Input\n                  id=\"name\"\n                  placeholder={t('assetDetail.placeholders.assetName')}\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.assetName')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">{t('assetDetail.fields.assetType')}</Label>\n                <Select\n                  value={formData.type}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"RealEstate\">{t('assetDetail.types.realEstate')}</SelectItem>\n                    <SelectItem value=\"Business\">{t('assetDetail.types.business')}</SelectItem>\n                    <SelectItem value=\"Vehicle\">{t('assetDetail.types.vehicle')}</SelectItem>\n                    <SelectItem value=\"FinancialAccount\">{t('assetDetail.types.financialAccount')}</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.assetType')}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Real Estate Specific Fields */}\n          {formData.type === 'RealEstate' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.propertyDetails')}</h3>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">{t('assetDetail.fields.propertyAddress')}</Label>\n                  <Textarea\n                    id=\"address\"\n                    placeholder={t('assetDetail.placeholders.propertyAddress')}\n                    value={formData.address}\n                    onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                    rows={3}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.propertyAddress')}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"registry\">{t('assetDetail.fields.propertyRegistryNumber')}</Label>\n                  <Input\n                    id=\"registry\"\n                    placeholder={t('assetDetail.placeholders.propertyRegistryNumber')}\n                    value={formData.property_registry_number}\n                    onChange={(e) => setFormData(prev => ({ ...prev, property_registry_number: e.target.value }))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.propertyRegistryNumber')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Financial Account Specific Fields */}\n          {formData.type === 'FinancialAccount' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.accountDetails')}</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"accountType\">{t('assetDetail.fields.accountType')}</Label>\n                  <Select\n                    value={formData.account_type}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, account_type: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('assetDetail.placeholders.selectAccountType')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Bank Account\">{t('assetDetail.accountTypes.bankAccount')}</SelectItem>\n                      <SelectItem value=\"Investment Portfolio\">{t('assetDetail.accountTypes.investmentPortfolio')}</SelectItem>\n                      <SelectItem value=\"Pension Fund\">{t('assetDetail.accountTypes.pensionFund')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.accountType')}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"institution\">{t('assetDetail.fields.financialInstitution')}</Label>\n                  <Input\n                    id=\"institution\"\n                    placeholder={t('assetDetail.placeholders.financialInstitution')}\n                    value={formData.financial_institution}\n                    onChange={(e) => setFormData(prev => ({ ...prev, financial_institution: e.target.value }))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.financialInstitution')}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"accountNumber\">{t('assetDetail.fields.accountNumber')}</Label>\n                <Input\n                  id=\"accountNumber\"\n                  placeholder={t('assetDetail.placeholders.accountNumber')}\n                  value={formData.account_number}\n                  onChange={(e) => setFormData(prev => ({ ...prev, account_number: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.accountNumber')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"credentials\">{t('assetDetail.fields.loginCredentials')}</Label>\n                <Textarea\n                  id=\"credentials\"\n                  placeholder={t('assetDetail.placeholders.loginCredentials')}\n                  value={formData.login_credentials}\n                  onChange={(e) => setFormData(prev => ({ ...prev, login_credentials: e.target.value }))}\n                  rows={3}\n                />\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                  <p className=\"text-xs text-yellow-800\">\n                    ⚠️ <strong>{t('assetDetail.securityWarning')}</strong> {t('assetDetail.securityWarningText')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Financial Details Section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.financialDetails')}</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"value\">{t('assetDetail.fields.estimatedValue')}</Label>\n                <Input\n                  id=\"value\"\n                  type=\"number\"\n                  placeholder={t('assetDetail.placeholders.estimatedValue')}\n                  value={formData.estimated_value}\n                  onChange={(e) => setFormData(prev => ({ ...prev, estimated_value: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.estimatedValue')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currency\">{t('assetDetail.fields.currency')}</Label>\n                <Select\n                  value={formData.currency_code}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, currency_code: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CURRENCIES.map((currency) => (\n                      <SelectItem key={currency.code} value={currency.code}>\n                        {currency.symbol} {currency.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.currency')}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end gap-4 pt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={() => navigate('/dashboard')}\n              disabled={isSaving}\n            >\n              {t('assetDetail.buttons.cancel')}\n            </Button>\n            <Button\n              onClick={handleSave}\n              disabled={isSaving}\n            >\n              {isSaving ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  {t('assetDetail.buttons.saving')}\n                </>\n              ) : (\n                <>\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  {isNewAsset ? t('assetDetail.buttons.createAsset') : t('assetDetail.buttons.updateAsset')}\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/pages/GuardianView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadGuardianData'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadGuardianData]","fix":{"range":[1468,1470],"text":"[loadGuardianData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { \n  Shield, \n  FileText, \n  Users, \n  Heart,\n  Star,\n  Download,\n  Eye,\n  Calendar,\n  Mail,\n  Phone,\n  MapPin\n} from 'lucide-react';\nimport { COUNTRY_CONFIGS } from '@/config/countries';\n\ninterface Document {\n  id: string;\n  name: string;\n  type: string;\n  country_code: string;\n  expiration_date?: string | null;\n  is_key_document?: boolean;\n}\n\ninterface Contact {\n  id: string;\n  name: string;\n  role: string;\n  email?: string;\n  phone_number?: string;\n}\n\ninterface Instructions {\n  funeral_wishes?: string;\n  digital_accounts_shutdown?: string;\n  messages_to_loved_ones?: string;\n}\n\nexport const GuardianView: React.FC = () => {\n  const { t } = useTranslation('common');\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [instructions, setInstructions] = useState<Instructions | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [guardianInfo, setGuardianInfo] = useState<Record<string, unknown> | null>(null);\n  const [userInfo, setUserInfo] = useState<string>('');\n\n  useEffect(() => {\n     \n    loadGuardianData();\n  }, []);\n\n  const loadGuardianData = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(t('guardianView.errors.pleaseLogin'));\n        return;\n      }\n\n      // For this demo, we'll load all data\n      // In a real application, you'd verify the user is an accepted guardian\n      // and only show data they have permission to see\n      \n      // Load key documents only\n      const { data: documentsData, error: docsError } = await supabase\n        .from('documents')\n        .select('*')\n        .eq('is_key_document', true);\n\n      if (docsError) {\n        // Error loading documents\n      } else {\n        setDocuments(documentsData || []);\n      }\n\n      // Load important contacts\n      const { data: contactsData, error: contactsError } = await supabase\n        .from('contacts')\n        .select('*');\n\n      if (contactsError) {\n        // Error loading contacts\n      } else {\n        setContacts(contactsData || []);\n      }\n\n      // Load instructions\n      const { data: instructionsData, error: instructionsError } = await supabase\n        .from('instructions')\n        .select('*')\n        .single();\n\n      if (instructionsError && instructionsError.code !== 'PGRST116') {\n        // Error loading instructions\n      } else {\n        setInstructions(instructionsData);\n      }\n\n      // Set placeholder user info\n      setUserInfo(t('guardianView.defaultUserName'));\n      \n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Pohľad strážcu] Chyba pri načítanie dát pre strážcu:', {\n        timestamp,\n        operation: 'loadGuardianData',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri načítanie dát pre strážcu.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCountryFlag = (countryCode: string) => {\n    const config = Object.values(COUNTRY_CONFIGS).find(c => c.code === countryCode);\n    return config?.flag || '🏳️';\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return t('guardianView.sections.keyDocuments.noExpiration');\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse text-center\">\n          <Shield className=\"h-8 w-8 text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">{t('guardianView.loading')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center w-20 h-20 rounded-full bg-primary/10 mx-auto\">\n          <Shield className=\"h-10 w-10 text-primary\" />\n        </div>\n        <div>\n          <h1 className=\"text-3xl font-bold\">{t('guardianView.title')}</h1>\n          <p className=\"text-muted-foreground\">\n            {t('guardianView.subtitle', { userName: userInfo })}\n          </p>\n        </div>\n        <Badge variant=\"heritage\" className=\"mx-auto\">\n          <Eye className=\"h-3 w-3 mr-1\" />\n          {t('guardianView.readOnlyAccess')}\n        </Badge>\n      </div>\n\n      {/* Key Documents */}\n      <Card variant=\"heritage\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FileText className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.keyDocuments.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.keyDocuments.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {documents.length > 0 ? (\n              documents.map((document) => (\n                <div key={document.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <FileText className=\"h-4 w-4 text-primary\" />\n                    <div>\n                      <h4 className=\"font-medium\">{document.name}</h4>\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <span>{document.type}</span>\n                        <span>•</span>\n                        <span className=\"flex items-center\">\n                          {getCountryFlag(document.country_code)}\n                          <span className=\"ml-1\">\n                            {COUNTRY_CONFIGS[document.country_code as keyof typeof COUNTRY_CONFIGS]?.name}\n                          </span>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right space-y-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      <Star className=\"h-3 w-3 mr-1\" />\n                      {t('guardianView.sections.keyDocuments.keyDocumentBadge')}\n                    </Badge>\n                    <p className=\"text-xs text-muted-foreground\">\n                      <Calendar className=\"h-3 w-3 inline mr-1\" />\n                      {t('guardianView.sections.keyDocuments.expires')}: {formatDate(document.expiration_date)}\n                    </p>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.keyDocuments.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Important Contacts */}\n      <Card variant=\"earth\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.importantContacts.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.importantContacts.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {contacts.length > 0 ? (\n              contacts.map((contact) => (\n                <div key={contact.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary/10\">\n                      <Users className=\"h-4 w-4 text-primary\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">{contact.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{contact.role}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right space-y-1 text-sm\">\n                    {contact.email && (\n                      <p className=\"flex items-center text-muted-foreground\">\n                        <Mail className=\"h-3 w-3 mr-1\" />\n                        {contact.email}\n                      </p>\n                    )}\n                    {contact.phone_number && (\n                      <p className=\"flex items-center text-muted-foreground\">\n                        <Phone className=\"h-3 w-3 mr-1\" />\n                        {contact.phone_number}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.importantContacts.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Final Wishes & Instructions */}\n      <Card variant=\"heritage\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Heart className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.finalWishes.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.finalWishes.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {/* Funeral Wishes */}\n            {instructions?.funeral_wishes && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.funeralWishes')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.funeral_wishes}</p>\n                </div>\n              </div>\n            )}\n\n            {/* Digital Accounts */}\n            {instructions?.digital_accounts_shutdown && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.digitalAccounts')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.digital_accounts_shutdown}</p>\n                </div>\n              </div>\n            )}\n\n            {/* Messages to Loved Ones */}\n            {instructions?.messages_to_loved_ones && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.messagesToLovedOnes')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.messages_to_loved_ones}</p>\n                </div>\n              </div>\n            )}\n\n            {!instructions && (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.finalWishes.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Guardian Information */}\n      <Card>\n        <CardContent className=\"text-center py-6\">\n          <Shield className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">\n            {t('guardianView.footer.guardianInfo')}\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            {t('guardianView.footer.securityNote')}\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/pages/InviteAcceptance.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInvitation'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [inviteToken, loadInvitation]","fix":{"range":[1163,1176],"text":"[inviteToken, loadInvitation]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { CheckCircle2, XCircle, Shield, User } from 'lucide-react';\n\ninterface GuardianInvitation {\n  id: string;\n  full_name: string;\n  relationship: string;\n  roles: string[];\n  invitation_status: string;\n  user_id: string;\n}\n\nexport const InviteAcceptance: React.FC = () => {\n  const { inviteToken } = useParams<{ inviteToken: string }>();\n  const navigate = useNavigate();\n  const { t } = useTranslation('common');\n  const [invitation, setInvitation] = useState<GuardianInvitation | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [inviterName, setInviterName] = useState<string>('');\n\n  useEffect(() => {\n     \n    loadInvitation();\n  }, [inviteToken]);\n\n  const loadInvitation = async () => {\n    if (!inviteToken) {\n      toast.error(t('inviteAcceptance.errors.invalidLink'));\n      navigate('/');\n      return;\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('guardians')\n        .select('*')\n        .eq('invitation_token', inviteToken)\n        .single();\n\n      if (error || !data) {\n        toast.error(t('inviteAcceptance.errors.notFound'));\n        navigate('/');\n        return;\n      }\n\n      if (data.invitation_status !== 'sent') {\n        toast.error(t('inviteAcceptance.errors.alreadyProcessed'));\n        navigate('/');\n        return;\n      }\n\n      setInvitation(data);\n      \n      // Get inviter's information (you might want to create a profiles table for this)\n      // For now, we'll use a placeholder\n      setInviterName(t('inviteAcceptance.defaultInviterName'));\n      \n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Pozvánka strážcu] Chyba pri načítanie pozvánky:', {\n        timestamp,\n        operation: 'loadInvitation',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri načítanie pozvánky.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAccept = async () => {\n    if (!invitation) return;\n    \n    setProcessing(true);\n    try {\n      const { error } = await supabase\n        .from('guardians')\n        .update({\n          invitation_status: 'accepted',\n          accepted_at: new Date().toISOString()\n        })\n        .eq('id', invitation.id);\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success(t('inviteAcceptance.messages.accepted'));\n      \n      // Redirect to guardian view or login\n      navigate('/guardian-view');\n      \n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Pozvánka strážcu] Chyba pri prijatie pozvánky:', {\n        timestamp,\n        operation: 'handleAccept',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri prijatie pozvánky.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const handleDecline = async () => {\n    if (!invitation) return;\n    \n    setProcessing(true);\n    try {\n      const { error } = await supabase\n        .from('guardians')\n        .update({\n          invitation_status: 'declined'\n        })\n        .eq('id', invitation.id);\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success(t('inviteAcceptance.messages.declined'));\n      navigate('/');\n      \n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Pozvánka strážcu] Chyba pri odmietnutie pozvánky:', {\n        timestamp,\n        operation: 'handleDecline',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri odmietnutie pozvánky.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse\">\n          <Shield className=\"h-8 w-8 text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">{t('inviteAcceptance.loading')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!invitation) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center p-6\">\n            <XCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">{t('inviteAcceptance.notFound.title')}</h2>\n            <p className=\"text-muted-foreground\">{t('inviteAcceptance.notFound.description')}</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted/20\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center pb-6\">\n          <div className=\"flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mx-auto mb-4\">\n            <Shield className=\"h-8 w-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl mb-2\">\n            {t('invite.title', { name: inviterName })}\n          </CardTitle>\n          <CardDescription className=\"text-base\">\n            {t('inviteAcceptance.subtitle')}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Guardian Role Details */}\n          <div className=\"bg-muted/50 p-4 rounded-lg space-y-3\">\n            <h3 className=\"font-semibold flex items-center\">\n              <User className=\"h-4 w-4 mr-2\" />\n              {t('inviteAcceptance.guardianRole.title')}\n            </h3>\n            <div className=\"space-y-2 text-sm\">\n              <p><strong>{t('inviteAcceptance.guardianRole.yourName')}</strong> {invitation.full_name}</p>\n              <p><strong>{t('inviteAcceptance.guardianRole.relationship')}</strong> {invitation.relationship}</p>\n              <div>\n                <strong>{t('inviteAcceptance.guardianRole.responsibilities')}</strong>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {invitation.roles.map((role, index) => (\n                    <Badge key={index} variant=\"heritage\" className=\"text-xs\">\n                      {role}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* What This Means */}\n          <div className=\"bg-primary/5 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-primary mb-2\">{t('inviteAcceptance.whatThisMeans.title')}</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>• {t('inviteAcceptance.whatThisMeans.point1')}</li>\n              <li>• {t('inviteAcceptance.whatThisMeans.point2')}</li>\n              <li>• {t('inviteAcceptance.whatThisMeans.point3')}</li>\n              <li>• {t('inviteAcceptance.whatThisMeans.point4')}</li>\n            </ul>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n            <Button \n              onClick={handleAccept}\n              disabled={processing}\n              className=\"flex-1\"\n              size=\"lg\"\n            >\n              <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n              {processing ? t('inviteAcceptance.buttons.processing') : t('inviteAcceptance.buttons.acceptRole')}\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={handleDecline}\n              disabled={processing}\n              className=\"flex-1\"\n              size=\"lg\"\n            >\n              <XCircle className=\"h-4 w-4 mr-2\" />\n              {t('inviteAcceptance.buttons.decline')}\n            </Button>\n          </div>\n\n          <p className=\"text-xs text-muted-foreground text-center\">\n            {t('inviteAcceptance.disclaimer')}\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/pages/Manual.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-error-boundaries/pages/Will.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-retry/components/dashboard/DocumentUpload.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":1,"column":14886}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';import { useTranslation } from 'react-i18next';import { Button } from '@/components/ui/button';import { Input } from '@/components/ui/input';import { Label } from '@/components/ui/label';import { Progress } from '@/components/ui/progress';import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';import { Calendar } from '@/components/ui/calendar';import { cn } from '@/lib/utils';import { format } from 'date-fns';import { CalendarIcon, Upload, FileText } from 'lucide-react';import { COUNTRY_CONFIGS } from '@/config/countries';import { useCountry } from '@/contexts/CountryContext';import { supabase } from '@/integrations/supabase/client';import { toast } from 'sonner';import { MAX_FILE_SIZES } from '@/utils/constants';import { useUserPlan } from '@/hooks/useUserPlan';import { AsyncErrorBoundary } from '@/components/common/AsyncErrorBoundary';interface DocumentUploadProps {  onDocumentUploaded: (document: Record<string, unknown>) => void;  onCancel: () => void;}export const DocumentUpload: React.FC<DocumentUploadProps> = ({ onDocumentUploaded, onCancel }) => {  const { t } = useTranslation('common');  const { selectedCountryCode } = useCountry();    const { plan } = useUserPlan();    // Upload state  const [file, setFile] = useState<File | null>(null);  const [uploadProgress, setUploadProgress] = useState(0);  const [isUploading, setIsUploading] = useState(false);  const [uploadedFilePath, setUploadedFilePath] = useState<string | null>(null);    // Form state  const [documentName, setDocumentName] = useState('');  const [documentType, setDocumentType] = useState('');  const [countryCode, setCountryCode] = useState(selectedCountryCode);  const [expirationDate, setExpirationDate] = useState<Date | null>(null);    const [showForm, setShowForm] = useState(false);  const documentTypes = [    { key: 'realEstateDeed', value: t('documentTypes.realEstateDeed') },    { key: 'birthCertificate', value: t('documentTypes.birthCertificate') },    { key: 'insurancePolicy', value: t('documentTypes.insurancePolicy') },    { key: 'lastWill', value: t('documentTypes.lastWill') },    { key: 'employmentContract', value: t('documentTypes.employmentContract') },    { key: 'passport', value: t('documentTypes.passport') },    { key: 'drivingLicense', value: t('documentTypes.drivingLicense') },    { key: 'bankStatement', value: t('documentTypes.bankStatement') },    { key: 'investmentCertificate', value: t('documentTypes.investmentCertificate') },    { key: 'other', value: t('documentTypes.other') },  ];  const supportedCountries = Object.values(COUNTRY_CONFIGS);  const handleFileSelect = useCallback((selectedFile: File) => {    const maxFileSize = MAX_FILE_SIZES[plan];        // Check file size    if (selectedFile.size > maxFileSize) {      const maxSizeMB = maxFileSize / (1024 * 1024);      toast.error(t('documentUpload.fileTooLarge', { maxSize: maxSizeMB }));      return;    }        setFile(selectedFile);    if (!documentName) {      // Auto-set document name from filename      const nameWithoutExtension = selectedFile.name.replace(/\\.[^/.]+$/, '');      setDocumentName(nameWithoutExtension);    }  }, [documentName, t]);  const handleDrop = useCallback((e: React.DragEvent) => {    // eslint-disable-next-line react-hooks/exhaustive-deps    e.preventDefault();    const droppedFile = e.dataTransfer.files[0];    if (droppedFile) {      handleFileSelect(droppedFile);    }  }, [handleFileSelect]);  const handleDragOver = useCallback((e: React.DragEvent) => {    // eslint-disable-next-line react-hooks/exhaustive-deps    e.preventDefault();  }, []);  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {    // eslint-disable-next-line react-hooks/exhaustive-deps    const selectedFile = e.target.files?.[0];    if (selectedFile) {      handleFileSelect(selectedFile);    }  }, [handleFileSelect]);  const uploadFile = async () => {    if (!file) return null;    setIsUploading(true);    setUploadProgress(0);    try {      // Create unique filename      const fileExt = file.name.split('.').pop();      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;      const filePath = `${fileName}`;      // Upload file to Supabase storage      const { data, error } = await supabase.storage        .from('documents')        .upload(filePath, file);      if (error) {        throw error;      }      setUploadProgress(100);      setUploadedFilePath(data.path);      setShowForm(true);      toast.success(t('documentUpload.fileUploadedSuccess'));            return data.path;        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Aplikácia] Chyba pri operácia:', {        timestamp,        operation: 'uploadFile',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri operácia.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    });            let errorMessage = t('documentUpload.fileUploadFailed');      if (error instanceof Error) {        if (error.message.includes('storage')) {          errorMessage = `${t('documentUpload.fileUploadFailed')}: Problém s úložiskom`;        } else if (error.message.includes('network')) {          errorMessage = `${t('documentUpload.fileUploadFailed')}: Skontrolujte internetové pripojenie`;        }      }            toast.error(errorMessage);      return null;    } finally {      setIsUploading(false);    }  };  const handleSaveDocument = async () => {    if (!uploadedFilePath || !documentName.trim() || !documentType) {      toast.error(t('documentUpload.fillRequiredFields'));      return;    }    try {      const { data: { user } } = await supabase.auth.getUser();      if (!user) {        toast.error(t('documentUpload.loginToSave'));        return;      }      const { data, error } = await supabase        .from('documents')        .insert({          user_id: user.id,          name: documentName.trim(),          type: documentType,          country_code: countryCode,          file_path: uploadedFilePath,          file_size: file?.size || 0,          mime_type: file?.type || '',          expiration_date: expirationDate ? format(expirationDate, 'yyyy-MM-dd') : null,        })        .select()        .single();      if (error) {        throw error;      }      toast.success(t('documentUpload.saved'));      onDocumentUploaded(data);        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Aplikácia] Chyba pri operácia:', {        timestamp,        operation: 'handleSaveDocument',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri operácia.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    });            let errorMessage = t('documentUpload.failedSave');      if (error instanceof Error) {        if (error.message.includes('duplicate')) {          errorMessage = `${t('documentUpload.failedSave')}: Dokument s týmto názvom už existuje`;        } else if (error.message.includes('permission')) {          errorMessage = `${t('documentUpload.failedSave')}: Nedostatočné oprávnenia`;        }      }            toast.error(errorMessage);    }  };  if (showForm) {    return (    <AsyncErrorBoundary>      <div className=\"space-y-6\">        <div className=\"text-center\">          <FileText className=\"mx-auto h-12 w-12 text-primary mb-4\" />          <h3 className=\"text-lg font-semibold\">{t('documentUpload.detailsTitle')}</h3>          <p className=\"text-sm text-muted-foreground\">{t('documentUpload.detailsSubtitle')}</p>        </div>        <div className=\"space-y-4\">          <div className=\"space-y-2\">            <Label htmlFor=\"documentName\">{t('dashboard.documentName')}</Label>            <Input              id=\"documentName\"              placeholder={t('documentUpload.namePlaceholder')}              value={documentName}              onChange={(e) => setDocumentName(e.target.value)}            />          </div>          <div className=\"space-y-2\">            <Label htmlFor=\"documentType\">{t('dashboard.documentType')}</Label>            <Select value={documentType} onValueChange={setDocumentType}>              <SelectTrigger>                <SelectValue placeholder={t('documentUpload.typePlaceholder')} />              </SelectTrigger>              <SelectContent>                {documentTypes.map((type) => (                  <SelectItem key={type.key} value={type.value}>                    {type.value}                  </SelectItem>                ))}              </SelectContent>            </Select>          </div>          <div className=\"space-y-2\">            <Label htmlFor=\"countryCode\">{t('dashboard.countryOfRelevance')}</Label>            <Select value={countryCode} onValueChange={setCountryCode}>              <SelectTrigger>                <SelectValue placeholder={t('documentUpload.countryPlaceholder')} />              </SelectTrigger>              <SelectContent>                {supportedCountries.map((country) => (                  <SelectItem key={country.code} value={country.code}>                    <div className=\"flex items-center gap-2\">                      <span>{country.flag}</span>                      <span>{country.name}</span>                    </div>                  </SelectItem>                ))}              </SelectContent>            </Select>          </div>          <div className=\"space-y-2\">            <Label>{t('dashboard.expirationDate')}</Label>            <Popover>              <PopoverTrigger asChild>                <Button                  variant=\"outline\"                  className={cn(                    \"w-full justify-start text-left font-normal\",                    !expirationDate && \"text-muted-foreground\"                  )}                >                  <CalendarIcon className=\"mr-2 h-4 w-4\" />                  {expirationDate ? format(expirationDate, \"PPP\") : <span>{t('documentUpload.pickDate')}</span>}                </Button>              </PopoverTrigger>              <PopoverContent className=\"w-auto p-0\" align=\"start\">                <Calendar                  mode=\"single\"                  selected={expirationDate}                  onSelect={setExpirationDate}                  initialFocus                  className={cn(\"p-3 pointer-events-auto\")}                />              </PopoverContent>            </Popover>          </div>        </div>        <div className=\"flex gap-3 pt-4\">          <Button variant=\"outline\" onClick={onCancel} className=\"flex-1\">            {t('common.cancel')}          </Button>          <Button onClick={handleSaveDocument} className=\"flex-1\">            {t('dashboard.saveDocument')}          </Button>        </div>      </div>    </AsyncErrorBoundary>  );  }  return (    <div className=\"space-y-6\">      <div className=\"text-center\">        <Upload className=\"mx-auto h-12 w-12 text-primary mb-4\" />        <h3 className=\"text-lg font-semibold\">{t('documentUpload.title')}</h3>        <p className=\"text-sm text-muted-foreground\">{t('documentUpload.subtitle')}</p>      </div>      {!file && (        <div          className=\"border-2 border-dashed border-primary/20 rounded-lg p-8 text-center cursor-pointer hover:border-primary/40 transition-colors\"          onDrop={handleDrop}          onDragOver={handleDragOver}          onClick={() => document.getElementById('file-input')?.click()}        >          <Upload className=\"mx-auto h-8 w-8 text-muted-foreground mb-4\" />          <p className=\"text-sm text-muted-foreground mb-2\">            {t('dashboard.dragDropZone')}          </p>          <Button variant=\"outline\" size=\"sm\">            {t('documentUpload.browseFiles')}          </Button>          <input            id=\"file-input\"            type=\"file\"            className=\"hidden\"            onChange={handleFileInputChange}            accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.txt\"          />        </div>      )}      {file && !isUploading && !uploadedFilePath && (        <div className=\"space-y-4\">          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">            <FileText className=\"h-8 w-8 text-primary\" />            <div className=\"flex-1\">              <p className=\"font-medium text-sm\">{file.name}</p>              <p className=\"text-xs text-muted-foreground\">                {(file.size / 1024 / 1024).toFixed(2)} MB              </p>            </div>          </div>                    <div className=\"flex gap-3\">            <Button variant=\"outline\" onClick={() => setFile(null)} className=\"flex-1\">              {t('documentUpload.chooseDifferent')}            </Button>            <Button onClick={uploadFile} className=\"flex-1\">              {t('documentUpload.uploadButton')}            </Button>          </div>        </div>      )}      {isUploading && (        <div className=\"space-y-4\">          <div className=\"text-center\">            <p className=\"text-sm font-medium\">{t('dashboard.fileUploading')}</p>            <p className=\"text-xs text-muted-foreground\">{file?.name}</p>          </div>          <Progress value={uploadProgress} className=\"w-full\" />        </div>      )}    </div>  );};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-retry/components/dashboard/GuardianUpload.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":1,"column":9186}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';import { useTranslation } from 'react-i18next';import { Button } from '@/components/ui/button';import { Input } from '@/components/ui/input';import { Label } from '@/components/ui/label';import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';import { Checkbox } from '@/components/ui/checkbox';import { COUNTRY_CONFIGS } from '@/config/countries';import { supabase } from '@/integrations/supabase/client';import { toast } from '@/hooks/use-toast';import { AsyncErrorBoundary } from '@/components/common/AsyncErrorBoundary';interface GuardianUploadProps {  onSuccess: () => void;  onCancel: () => void;  editingGuardian?: Record<string, unknown>;}export const GuardianUpload: React.FC<GuardianUploadProps> = ({  onSuccess,  onCancel,  editingGuardian}) => {  const { t } = useTranslation();  const [isLoading, setIsLoading] = useState(false);  const [formData, setFormData] = useState({    full_name: editingGuardian?.full_name || '',    relationship: editingGuardian?.relationship || '',    country_code: editingGuardian?.country_code || '',    roles: editingGuardian?.roles || []  });  const relationships = [    { key: 'spouse', value: t('guardianUpload.relationships.spouse') },    { key: 'parent', value: t('guardianUpload.relationships.parent') },    { key: 'sibling', value: t('guardianUpload.relationships.sibling') },    { key: 'child', value: t('guardianUpload.relationships.child') },    { key: 'friend', value: t('guardianUpload.relationships.friend') },    { key: 'legalProfessional', value: t('guardianUpload.relationships.legalProfessional') },    { key: 'other', value: t('guardianUpload.relationships.other') }  ];  const availableRoles = [    { key: 'guardianForChildren', value: t('guardianUpload.roles.guardianForChildren') },    { key: 'executorOfWill', value: t('guardianUpload.roles.executorOfWill') },    { key: 'healthcareProxy', value: t('guardianUpload.roles.healthcareProxy') },    { key: 'financialPowerOfAttorney', value: t('guardianUpload.roles.financialPowerOfAttorney') },    { key: 'emergencyContact', value: t('guardianUpload.roles.emergencyContact') },    { key: 'trustee', value: t('guardianUpload.roles.trustee') }  ];  const handleSubmit = async (e: React.FormEvent) => {    e.preventDefault();        if (!formData.full_name || !formData.relationship || !formData.country_code) {      toast({        title: t('guardianUpload.error'),        description: t('guardianUpload.fillRequired'),        variant: \"destructive\"      });      return;    }    setIsLoading(true);    try {      const { data: { user } } = await supabase.auth.getUser();            if (!user) {        toast({          title: t('guardianUpload.error'),          description: t('guardianUpload.loginToSave'),          variant: \"destructive\"        });        return;      }      if (editingGuardian) {        // Update existing guardian        const { error } = await supabase          .from('guardians')          .update({            full_name: formData.full_name,            relationship: formData.relationship,            country_code: formData.country_code,            roles: formData.roles,            updated_at: new Date().toISOString()          })          .eq('id', editingGuardian.id);        if (error) throw error;        toast({          title: t('guardianUpload.success'),          description: t('guardianUpload.updated')        });      } else {        // Create new guardian        const { error } = await supabase          .from('guardians')          .insert({            user_id: user.id,            full_name: formData.full_name,            relationship: formData.relationship,            country_code: formData.country_code,            roles: formData.roles          });        if (error) throw error;        toast({          title: t('guardianUpload.success'),          description: t('guardianUpload.added')        });      }      onSuccess();        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Správa strážcov] Chyba pri uloženie strážcu:', {        timestamp,        operation: 'handleSubmit',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri uloženie strážcu.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    });    } finally {      setIsLoading(false);    }  };  const handleRoleToggle = (role: string, checked: boolean) => {    setFormData(prev => ({      ...prev,      roles: checked         ? [...prev.roles, role]        : prev.roles.filter(r => r !== role)    }));  };  return (    <AsyncErrorBoundary>      <div className=\"space-y-6\">      <div>        <h3 className=\"text-lg font-semibold\">          {editingGuardian ? t('guardianUpload.editTitle') : t('guardianUpload.addTitle')}        </h3>        <p className=\"text-sm text-muted-foreground\">          {t('guardianUpload.description')}        </p>      </div>      <form onSubmit={handleSubmit} className=\"space-y-4\">        {/* Guardian's Full Name */}        <div className=\"space-y-2\">          <Label htmlFor=\"full_name\">{t('guardianUpload.fullNameLabel')}</Label>          <Input            id=\"full_name\"            value={formData.full_name}            onChange={(e) => setFormData(prev => ({ ...prev, full_name: e.target.value }))}            placeholder={t('guardianUpload.fullNamePlaceholder')}            required          />        </div>        {/* Relationship */}        <div className=\"space-y-2\">          <Label htmlFor=\"relationship\">{t('guardianUpload.relationshipLabel')}</Label>          <Select            value={formData.relationship}            onValueChange={(value) => setFormData(prev => ({ ...prev, relationship: value }))}          >            <SelectTrigger>              <SelectValue placeholder={t('guardianUpload.relationshipPlaceholder')} />            </SelectTrigger>            <SelectContent>              {relationships.map((rel) => (                <SelectItem key={rel.key} value={rel.value}>                  {rel.value}                </SelectItem>              ))}            </SelectContent>          </Select>        </div>        {/* Country of Residence */}        <div className=\"space-y-2\">          <Label htmlFor=\"country_code\">{t('guardianUpload.countryLabel')}</Label>          <Select            value={formData.country_code}            onValueChange={(value) => setFormData(prev => ({ ...prev, country_code: value }))}          >            <SelectTrigger>              <SelectValue placeholder={t('guardianUpload.countryPlaceholder')} />            </SelectTrigger>            <SelectContent>              {Object.values(COUNTRY_CONFIGS)                .sort((a, b) => a.name.localeCompare(b.name))                .map((config) => (                  <SelectItem key={config.code} value={config.code}>                    <div className=\"flex items-center space-x-2\">                      <span>{config.flag}</span>                      <span>{config.name}</span>                    </div>                  </SelectItem>                ))}            </SelectContent>          </Select>          <p className=\"text-xs text-muted-foreground\">            {t('guardianUpload.countryDescription')}          </p>        </div>        {/* Roles */}        <div className=\"space-y-2\">          <Label>{t('guardianUpload.rolesTitle')}</Label>          <div className=\"grid grid-cols-1 gap-3\">            {availableRoles.map((role) => (              <div key={role.key} className=\"flex items-center space-x-2\">                <Checkbox                  id={role.key}                  checked={formData.roles.includes(role.value)}                  onCheckedChange={(checked) => handleRoleToggle(role.value, checked as boolean)}                />                <Label htmlFor={role.key} className=\"text-sm font-normal\">                  {role.value}                </Label>              </div>            ))}          </div>        </div>        <div className=\"flex space-x-3 pt-4\">          <Button type=\"submit\" disabled={isLoading}>            {isLoading ? t('guardianUpload.saving') : (editingGuardian ? t('guardianUpload.updateButton') : t('guardianUpload.addButton'))}          </Button>          <Button type=\"button\" variant=\"outline\" onClick={onCancel}>            {t('common.cancel')}          </Button>        </div>      </form>    </div>    </AsyncErrorBoundary>  );};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-retry/components/dashboard/StrategicSummary.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":1,"column":4783}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';import { useTranslation } from 'react-i18next';import { Card, CardContent } from '@/components/ui/card';import { Button } from '@/components/ui/button';import { ArrowRight, FileText, Shield } from 'lucide-react';import { useNavigate } from 'react-router-dom';import { supabase } from '@/integrations/supabase/client';import { AsyncErrorBoundary } from '@/components/common/AsyncErrorBoundary';export const StrategicSummary: React.FC = () => {  const { t } = useTranslation('common');  const navigate = useNavigate();  const [userProgress, setUserProgress] = useState<'initial' | 'documentAdded' | 'guardianAdded'>('initial');  const [isLoading, setIsLoading] = useState(true);  useEffect(() => {    // eslint-disable-next-line react-hooks/exhaustive-deps    checkUserProgress();  }, []);  const checkUserProgress = async () => {    try {      const { data: { user } } = await supabase.auth.getUser();      if (!user) return;      // Check if user has documents      const { count: documentCount } = await supabase        .from('documents')        .select('*', { count: 'exact', head: true })        .eq('user_id', user.id);      // Check if user has guardians      const { count: guardianCount } = await supabase        .from('guardians')        .select('*', { count: 'exact', head: true })        .eq('user_id', user.id);      if ((documentCount || 0) > 0 && (guardianCount || 0) > 0) {        setUserProgress('guardianAdded');      } else if ((documentCount || 0) > 0) {        setUserProgress('documentAdded');      } else {        setUserProgress('initial');      } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Aplikácia] Chyba pri operácia:', {        timestamp,        operation: 'checkUserProgress',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri operácia.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    });    } finally {      setIsLoading(false);    }  };  const getContent = () => {    switch (userProgress) {      case 'initial':        return {          text: t('dashboard.strategicSummary.initial'),          buttonLabel: t('dashboard.strategicSummary.addDocument'),          buttonIcon: <FileText className=\"mr-2 h-4 w-4\" />,          buttonAction: () => navigate('/vault'),        };      case 'documentAdded':        return {          text: t('dashboard.strategicSummary.documentAdded'),          buttonLabel: t('dashboard.strategicSummary.addGuardian'),          buttonIcon: <Shield className=\"mr-2 h-4 w-4\" />,          buttonAction: () => navigate('/guardians'),        };      case 'guardianAdded':        return {          text: t('dashboard.strategicSummary.guardianAdded'),          buttonLabel: t('dashboard.strategicSummary.continueBuilding'),          buttonIcon: <ArrowRight className=\"mr-2 h-4 w-4\" />,          buttonAction: () => navigate('/vault'),        };      default:        return null;    }  };  if (isLoading) {    return (    <AsyncErrorBoundary>      <Card className=\"mb-8\">        <CardContent className=\"pt-6\">          <div className=\"animate-pulse space-y-4\">            <div className=\"h-4 bg-muted rounded w-3/4\"></div>            <div className=\"h-4 bg-muted rounded w-1/2\"></div>            <div className=\"h-10 bg-muted rounded w-40\"></div>          </div>        </CardContent>      </Card>    </AsyncErrorBoundary>  );  }  const content = getContent();  if (!content) return null;  return (    <Card className=\"mb-8 bg-gradient-to-r from-primary/5 to-primary/10 border-primary/20\">      <CardContent className=\"pt-6\">        <div className=\"space-y-4\">          <p className=\"text-lg leading-relaxed\">            {content.text}          </p>          <Button             onClick={content.buttonAction}            size=\"lg\"            className=\"font-semibold\"          >            {content.buttonIcon}            {content.buttonLabel}          </Button>        </div>      </CardContent>    </Card>  );};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-retry/pages/AssetDetail.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAsset'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [assetId, isNewAsset, loadAsset]","fix":{"range":[2389,2410],"text":"[assetId, isNewAsset, loadAsset]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useSearchParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { CountrySelector } from '@/components/common/CountrySelector';\nimport { useCountry } from '@/contexts/CountryContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { ArrowLeft, Save, Home, Building, Car, Wallet } from 'lucide-react';\nimport { ErrorBoundary } from '@/components/common/ErrorBoundary';\n\ninterface Asset {\n  id: string;\n  user_id: string;\n  name: string;\n  type: string;\n  address?: string;\n  property_registry_number?: string;\n  estimated_value?: number;\n  currency_code: string;\n  metadata: Record<string, unknown>;\n}\n\nconst CURRENCIES = [\n  { code: 'EUR', symbol: '€', name: 'Euro' },\n  { code: 'USD', symbol: '$', name: 'US Dollar' },\n  { code: 'GBP', symbol: '£', name: 'British Pound' },\n  { code: 'CZK', symbol: 'Kč', name: 'Czech Koruna' },\n  { code: 'PLN', symbol: 'zł', name: 'Polish Złoty' },\n];\n\nexport const AssetDetail: React.FC = () => {\n  const { t } = useTranslation('common');\n  const { assetId } = useParams<{ assetId: string }>();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { selectedCountryCode } = useCountry();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [asset, setAsset] = useState<Asset | null>(null);\n  \n  // Form state\n  const [formData, setFormData] = useState({\n    name: '',\n    type: searchParams.get('type') || 'RealEstate',\n    address: '',\n    property_registry_number: '',\n    estimated_value: '',\n    currency_code: 'EUR',\n    // Financial Account specific fields\n    account_type: '',\n    financial_institution: '',\n    account_number: '',\n    login_credentials: '',\n  });\n\n  const isNewAsset = assetId === 'new';\n\n  useEffect(() => {\n     \n    if (!isNewAsset && assetId) {\n      loadAsset();\n    }\n  }, [assetId, isNewAsset]);\n\n  const loadAsset = async () => {\n    if (!assetId) return;\n    \n    setIsLoading(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        navigate('/login');\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('assets')\n        .select('*')\n        .eq('id', assetId)\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) {\n        throw error;\n      }\n\n      setAsset(data);\n      setFormData({\n        name: data.name || '',\n        type: data.type || 'RealEstate',\n        address: data.address || '',\n        property_registry_number: data.property_registry_number || '',\n        estimated_value: data.estimated_value?.toString() || '',\n        currency_code: data.currency_code || 'EUR',\n        // Financial Account specific fields\n        account_type: (data.metadata as Record<string, unknown>)?.account_type || '',\n        financial_institution: (data.metadata as Record<string, unknown>)?.financial_institution || '',\n        account_number: (data.metadata as Record<string, unknown>)?.account_number || '',\n        login_credentials: (data.metadata as Record<string, unknown>)?.login_credentials || '',\n      });\n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Detail majetku] Chyba pri načítanie majetku:', {\n        timestamp,\n        operation: 'loadAsset',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri načítanie majetku.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!formData.name.trim()) {\n      toast.error(t('assetDetail.errors.nameRequired'));\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        navigate('/login');\n        return;\n      }\n\n      const assetData = {\n        user_id: user.id,\n        name: formData.name.trim(),\n        type: formData.type,\n        address: formData.address.trim() || null,\n        property_registry_number: formData.property_registry_number.trim() || null,\n        estimated_value: formData.estimated_value ? parseFloat(formData.estimated_value) : null,\n        currency_code: formData.currency_code,\n        metadata: formData.type === 'FinancialAccount' ? {\n          account_type: formData.account_type,\n          financial_institution: formData.financial_institution,\n          account_number: formData.account_number,\n          login_credentials: formData.login_credentials,\n        } : {},\n      };\n\n      if (isNewAsset) {\n        const { error } = await supabase\n          .from('assets')\n          .insert([assetData]);\n\n        if (error) throw error;\n        \n        toast.success(t('assetDetail.messages.createdSuccessfully'));\n      } else {\n        const { error } = await supabase\n          .from('assets')\n          .update(assetData)\n          .eq('id', assetId)\n          .eq('user_id', user.id);\n\n        if (error) throw error;\n        \n        toast.success(t('assetDetail.messages.updatedSuccessfully'));\n      }\n\n      navigate('/dashboard');\n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Detail majetku] Chyba pri uloženie majetku:', {\n        timestamp,\n        operation: 'handleSave',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri uloženie majetku.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getAssetIcon = (type: string) => {\n    switch (type) {\n      case 'RealEstate':\n        return <Home className=\"h-6 w-6\" />;\n      case 'Business':\n        return <Building className=\"h-6 w-6\" />;\n      case 'Vehicle':\n        return <Car className=\"h-6 w-6\" />;\n      case 'FinancialAccount':\n        return <Wallet className=\"h-6 w-6\" />;\n      default:\n        return <Home className=\"h-6 w-6\" />;\n    }\n  };\n\n  const getAssetTypeLabel = (type: string) => {\n    switch (type) {\n      case 'RealEstate':\n        return t('assetDetail.types.realEstate');\n      case 'Business':\n        return t('assetDetail.types.business');\n      case 'Vehicle':\n        return t('assetDetail.types.vehicle');\n      case 'FinancialAccount':\n        return t('assetDetail.types.financialAccount');\n      default:\n        return t('assetDetail.types.asset');\n    }\n  };\n\n  if (isLoading) {\n    return (\n    <ErrorBoundary>\n      <div className=\"container mx-auto px-4 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">{t('assetDetail.loading')}</p>\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() => navigate('/dashboard')}\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <div className=\"flex items-center gap-3\">\n          {getAssetIcon(formData.type)}\n          <div>\n            <h1 className=\"text-2xl font-bold\">\n              {isNewAsset ? t('assetDetail.title.new', { type: getAssetTypeLabel(formData.type) }) : formData.name}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {isNewAsset ? t('assetDetail.subtitle.new') : t('assetDetail.subtitle.edit')}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Asset Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>{t('assetDetail.sections.assetInformation')}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-8\">\n          {/* Basic Information Section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.basicInformation')}</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">{t('assetDetail.fields.assetName')} *</Label>\n                <Input\n                  id=\"name\"\n                  placeholder={t('assetDetail.placeholders.assetName')}\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.assetName')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">{t('assetDetail.fields.assetType')}</Label>\n                <Select\n                  value={formData.type}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"RealEstate\">{t('assetDetail.types.realEstate')}</SelectItem>\n                    <SelectItem value=\"Business\">{t('assetDetail.types.business')}</SelectItem>\n                    <SelectItem value=\"Vehicle\">{t('assetDetail.types.vehicle')}</SelectItem>\n                    <SelectItem value=\"FinancialAccount\">{t('assetDetail.types.financialAccount')}</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.assetType')}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Real Estate Specific Fields */}\n          {formData.type === 'RealEstate' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.propertyDetails')}</h3>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">{t('assetDetail.fields.propertyAddress')}</Label>\n                  <Textarea\n                    id=\"address\"\n                    placeholder={t('assetDetail.placeholders.propertyAddress')}\n                    value={formData.address}\n                    onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                    rows={3}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.propertyAddress')}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"registry\">{t('assetDetail.fields.propertyRegistryNumber')}</Label>\n                  <Input\n                    id=\"registry\"\n                    placeholder={t('assetDetail.placeholders.propertyRegistryNumber')}\n                    value={formData.property_registry_number}\n                    onChange={(e) => setFormData(prev => ({ ...prev, property_registry_number: e.target.value }))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.propertyRegistryNumber')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Financial Account Specific Fields */}\n          {formData.type === 'FinancialAccount' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.accountDetails')}</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"accountType\">{t('assetDetail.fields.accountType')}</Label>\n                  <Select\n                    value={formData.account_type}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, account_type: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('assetDetail.placeholders.selectAccountType')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Bank Account\">{t('assetDetail.accountTypes.bankAccount')}</SelectItem>\n                      <SelectItem value=\"Investment Portfolio\">{t('assetDetail.accountTypes.investmentPortfolio')}</SelectItem>\n                      <SelectItem value=\"Pension Fund\">{t('assetDetail.accountTypes.pensionFund')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.accountType')}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"institution\">{t('assetDetail.fields.financialInstitution')}</Label>\n                  <Input\n                    id=\"institution\"\n                    placeholder={t('assetDetail.placeholders.financialInstitution')}\n                    value={formData.financial_institution}\n                    onChange={(e) => setFormData(prev => ({ ...prev, financial_institution: e.target.value }))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    {t('assetDetail.descriptions.financialInstitution')}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"accountNumber\">{t('assetDetail.fields.accountNumber')}</Label>\n                <Input\n                  id=\"accountNumber\"\n                  placeholder={t('assetDetail.placeholders.accountNumber')}\n                  value={formData.account_number}\n                  onChange={(e) => setFormData(prev => ({ ...prev, account_number: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.accountNumber')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"credentials\">{t('assetDetail.fields.loginCredentials')}</Label>\n                <Textarea\n                  id=\"credentials\"\n                  placeholder={t('assetDetail.placeholders.loginCredentials')}\n                  value={formData.login_credentials}\n                  onChange={(e) => setFormData(prev => ({ ...prev, login_credentials: e.target.value }))}\n                  rows={3}\n                />\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n                  <p className=\"text-xs text-yellow-800\">\n                    ⚠️ <strong>{t('assetDetail.securityWarning')}</strong> {t('assetDetail.securityWarningText')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Financial Details Section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">{t('assetDetail.sections.financialDetails')}</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"value\">{t('assetDetail.fields.estimatedValue')}</Label>\n                <Input\n                  id=\"value\"\n                  type=\"number\"\n                  placeholder={t('assetDetail.placeholders.estimatedValue')}\n                  value={formData.estimated_value}\n                  onChange={(e) => setFormData(prev => ({ ...prev, estimated_value: e.target.value }))}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.estimatedValue')}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currency\">{t('assetDetail.fields.currency')}</Label>\n                <Select\n                  value={formData.currency_code}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, currency_code: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CURRENCIES.map((currency) => (\n                      <SelectItem key={currency.code} value={currency.code}>\n                        {currency.symbol} {currency.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground\">\n                  {t('assetDetail.descriptions.currency')}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end gap-4 pt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={() => navigate('/dashboard')}\n              disabled={isSaving}\n            >\n              {t('assetDetail.buttons.cancel')}\n            </Button>\n            <Button\n              onClick={handleSave}\n              disabled={isSaving}\n            >\n              {isSaving ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  {t('assetDetail.buttons.saving')}\n                </>\n              ) : (\n                <>\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  {isNewAsset ? t('assetDetail.buttons.createAsset') : t('assetDetail.buttons.updateAsset')}\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-retry/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-retry/pages/GuardianView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadGuardianData'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadGuardianData]","fix":{"range":[1535,1537],"text":"[loadGuardianData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { \n  Shield, \n  FileText, \n  Users, \n  Heart,\n  Star,\n  Download,\n  Eye,\n  Calendar,\n  Mail,\n  Phone,\n  MapPin\n} from 'lucide-react';\nimport { COUNTRY_CONFIGS } from '@/config/countries';\nimport { ErrorBoundary } from '@/components/common/ErrorBoundary';\n\ninterface Document {\n  id: string;\n  name: string;\n  type: string;\n  country_code: string;\n  expiration_date?: string | null;\n  is_key_document?: boolean;\n}\n\ninterface Contact {\n  id: string;\n  name: string;\n  role: string;\n  email?: string;\n  phone_number?: string;\n}\n\ninterface Instructions {\n  funeral_wishes?: string;\n  digital_accounts_shutdown?: string;\n  messages_to_loved_ones?: string;\n}\n\nexport const GuardianView: React.FC = () => {\n  const { t } = useTranslation('common');\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [instructions, setInstructions] = useState<Instructions | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [guardianInfo, setGuardianInfo] = useState<Record<string, unknown> | null>(null);\n  const [userInfo, setUserInfo] = useState<string>('');\n\n  useEffect(() => {\n     \n    loadGuardianData();\n  }, []);\n\n  const loadGuardianData = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        toast.error(t('guardianView.errors.pleaseLogin'));\n        return;\n      }\n\n      // For this demo, we'll load all data\n      // In a real application, you'd verify the user is an accepted guardian\n      // and only show data they have permission to see\n      \n      // Load key documents only\n      const { data: documentsData, error: docsError } = await supabase\n        .from('documents')\n        .select('*')\n        .eq('is_key_document', true);\n\n      if (docsError) {\n        // Error loading documents\n      } else {\n        setDocuments(documentsData || []);\n      }\n\n      // Load important contacts\n      const { data: contactsData, error: contactsError } = await supabase\n        .from('contacts')\n        .select('*');\n\n      if (contactsError) {\n        // Error loading contacts\n      } else {\n        setContacts(contactsData || []);\n      }\n\n      // Load instructions\n      const { data: instructionsData, error: instructionsError } = await supabase\n        .from('instructions')\n        .select('*')\n        .single();\n\n      if (instructionsError && instructionsError.code !== 'PGRST116') {\n        // Error loading instructions\n      } else {\n        setInstructions(instructionsData);\n      }\n\n      // Set placeholder user info\n      setUserInfo(t('guardianView.defaultUserName'));\n      \n        } catch (error: Record<string, unknown>) {\n      const timestamp = new Date().toISOString();\n      const errorMessage = error?.message || 'Neznáma chyba';\n      const errorCode = error?.code || 'UNKNOWN_ERROR';\n      \n      // Detailné logovanie pre debugging\n      console.error('[Pohľad strážcu] Chyba pri načítanie dát pre strážcu:', {\n        timestamp,\n        operation: 'loadGuardianData',\n        errorCode,\n        errorMessage,\n        errorDetails: error,\n        stack: error?.stack\n      });\n      \n      // Používateľsky prívetivá správa\n      let userMessage = 'Nastala chyba pri načítanie dát pre strážcu.';\n      \n      // Špecifické správy podľa typu chyby\n      if (error?.code === 'PGRST116') {\n        userMessage = 'Požadované dáta neboli nájdené.';\n      } else if (error?.message?.includes('network')) {\n        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';\n      } else if (error?.message?.includes('permission')) {\n        userMessage = 'Nemáte oprávnenie na túto akciu.';\n      } else if (error?.message?.includes('duplicate')) {\n        userMessage = 'Takýto záznam už existuje.';\n      }\n      \n      toast.error(userMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCountryFlag = (countryCode: string) => {\n    const config = Object.values(COUNTRY_CONFIGS).find(c => c.code === countryCode);\n    return config?.flag || '🏳️';\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return t('guardianView.sections.keyDocuments.noExpiration');\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  if (loading) {\n    return (\n    <ErrorBoundary>\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse text-center\">\n          <Shield className=\"h-8 w-8 text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">{t('guardianView.loading')}</p>\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center w-20 h-20 rounded-full bg-primary/10 mx-auto\">\n          <Shield className=\"h-10 w-10 text-primary\" />\n        </div>\n        <div>\n          <h1 className=\"text-3xl font-bold\">{t('guardianView.title')}</h1>\n          <p className=\"text-muted-foreground\">\n            {t('guardianView.subtitle', { userName: userInfo })}\n          </p>\n        </div>\n        <Badge variant=\"heritage\" className=\"mx-auto\">\n          <Eye className=\"h-3 w-3 mr-1\" />\n          {t('guardianView.readOnlyAccess')}\n        </Badge>\n      </div>\n\n      {/* Key Documents */}\n      <Card variant=\"heritage\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FileText className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.keyDocuments.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.keyDocuments.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {documents.length > 0 ? (\n              documents.map((document) => (\n                <div key={document.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <FileText className=\"h-4 w-4 text-primary\" />\n                    <div>\n                      <h4 className=\"font-medium\">{document.name}</h4>\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <span>{document.type}</span>\n                        <span>•</span>\n                        <span className=\"flex items-center\">\n                          {getCountryFlag(document.country_code)}\n                          <span className=\"ml-1\">\n                            {COUNTRY_CONFIGS[document.country_code as keyof typeof COUNTRY_CONFIGS]?.name}\n                          </span>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right space-y-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      <Star className=\"h-3 w-3 mr-1\" />\n                      {t('guardianView.sections.keyDocuments.keyDocumentBadge')}\n                    </Badge>\n                    <p className=\"text-xs text-muted-foreground\">\n                      <Calendar className=\"h-3 w-3 inline mr-1\" />\n                      {t('guardianView.sections.keyDocuments.expires')}: {formatDate(document.expiration_date)}\n                    </p>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.keyDocuments.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Important Contacts */}\n      <Card variant=\"earth\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.importantContacts.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.importantContacts.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {contacts.length > 0 ? (\n              contacts.map((contact) => (\n                <div key={contact.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary/10\">\n                      <Users className=\"h-4 w-4 text-primary\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">{contact.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{contact.role}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right space-y-1 text-sm\">\n                    {contact.email && (\n                      <p className=\"flex items-center text-muted-foreground\">\n                        <Mail className=\"h-3 w-3 mr-1\" />\n                        {contact.email}\n                      </p>\n                    )}\n                    {contact.phone_number && (\n                      <p className=\"flex items-center text-muted-foreground\">\n                        <Phone className=\"h-3 w-3 mr-1\" />\n                        {contact.phone_number}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.importantContacts.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Final Wishes & Instructions */}\n      <Card variant=\"heritage\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Heart className=\"h-5 w-5 mr-2\" />\n            {t('guardianView.sections.finalWishes.title')}\n          </CardTitle>\n          <CardDescription>\n            {t('guardianView.sections.finalWishes.description')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {/* Funeral Wishes */}\n            {instructions?.funeral_wishes && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.funeralWishes')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.funeral_wishes}</p>\n                </div>\n              </div>\n            )}\n\n            {/* Digital Accounts */}\n            {instructions?.digital_accounts_shutdown && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.digitalAccounts')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.digital_accounts_shutdown}</p>\n                </div>\n              </div>\n            )}\n\n            {/* Messages to Loved Ones */}\n            {instructions?.messages_to_loved_ones && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-primary\">{t('guardianView.sections.finalWishes.messagesToLovedOnes')}</h4>\n                <div className=\"p-3 bg-muted/30 rounded-lg\">\n                  <p className=\"text-sm\">{instructions.messages_to_loved_ones}</p>\n                </div>\n              </div>\n            )}\n\n            {!instructions && (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {t('guardianView.sections.finalWishes.empty')}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Guardian Information */}\n      <Card>\n        <CardContent className=\"text-center py-6\">\n          <Shield className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n          <p className=\"text-sm text-muted-foreground\">\n            {t('guardianView.footer.guardianInfo')}\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            {t('guardianView.footer.securityNote')}\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-retry/pages/Manual.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":2,"column":0}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';import { useTranslation } from 'react-i18next';import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';import { Button } from '@/components/ui/button';import { Input } from '@/components/ui/input';import { Label } from '@/components/ui/label';import { Textarea } from '@/components/ui/textarea';import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';import { Badge } from '@/components/ui/badge';import { supabase } from '@/integrations/supabase/client';import { toast } from 'sonner';import { Plus, User, Phone, Mail, Edit, Trash2, BookUser, FileText, Star, Heart, Trash, MessageSquare } from 'lucide-react';import { ErrorBoundary } from '@/components/common/ErrorBoundary';interface Contact {  id: string;  name: string;  role: string;  phone_number?: string;  email?: string;  notes?: string;}interface Document {  id: string;  name: string;  type: string;  country_code: string;  expiration_date?: string | null;  is_key_document: boolean;}interface Instructions {  id: string;  funeral_wishes?: string;  digital_accounts_shutdown?: string;  messages_to_loved_ones?: string;}export const Manual: React.FC = () => {  const { t } = useTranslation('common');  const [contacts, setContacts] = useState<Contact[]>([]);  const [documents, setDocuments] = useState<Document[]>([]);  const [instructions, setInstructions] = useState<Instructions | null>(null);  const [isContactSheetOpen, setIsContactSheetOpen] = useState(false);  const [editingContact, setEditingContact] = useState<Contact | null>(null);  const [isLoading, setIsLoading] = useState(true);  const [isDocumentsLoading, setIsDocumentsLoading] = useState(true);  const [isInstructionsLoading, setIsInstructionsLoading] = useState(true);  const [isSaving, setIsSaving] = useState(false);    // Form state  const [formData, setFormData] = useState({    name: '',    role: '',    phone_number: '',    email: '',    notes: '',  });  useEffect(() => {    // eslint-disable-next-line react-hooks/exhaustive-deps    loadContacts();    loadKeyDocuments();    loadInstructions();  }, []);  const loadContacts = async () => {    try {      const { data: { user } } = await supabase.auth.getUser();      if (!user) return;      const { data, error } = await supabase        .from('contacts')        .select('*')        .eq('user_id', user.id)        .order('created_at', { ascending: false });      if (error) {        throw error;      }      setContacts(data || []);        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Manuál a kontakty] Chyba pri načítanie kontaktov:', {        timestamp,        operation: 'loadContacts',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri načítanie kontaktov.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    } finally {      setIsLoading(false);    }  };  const resetForm = () => {    setFormData({      name: '',      role: '',      phone_number: '',      email: '',      notes: '',    });    setEditingContact(null);  };  const handleAddContact = () => {    resetForm();    setIsContactSheetOpen(true);  };  const handleEditContact = (contact: Contact) => {    setEditingContact(contact);    setFormData({      name: contact.name,      role: contact.role,      phone_number: contact.phone_number || '',      email: contact.email || '',      notes: contact.notes || '',    });    setIsContactSheetOpen(true);  };  const handleSaveContact = async () => {    if (!formData.name.trim() || !formData.role.trim()) {      toast.error(t('manual.contacts.messages.nameAndRoleRequired'));      return;    }    setIsSaving(true);    try {      const { data: { user } } = await supabase.auth.getUser();      if (!user) {        toast.error(t('manual.contacts.messages.loginRequired'));        return;      }      const contactData = {        user_id: user.id,        name: formData.name.trim(),        role: formData.role.trim(),        phone_number: formData.phone_number.trim() || null,        email: formData.email.trim() || null,        notes: formData.notes.trim() || null,      };      if (editingContact) {        const { error } = await supabase          .from('contacts')          .update(contactData)          .eq('id', editingContact.id)          .eq('user_id', user.id);        if (error) throw error;        toast.success(t('manual.contacts.messages.updated'));      } else {        const { error } = await supabase          .from('contacts')          .insert([contactData]);        if (error) throw error;        toast.success(t('manual.contacts.messages.added'));      }      setIsContactSheetOpen(false);      resetForm();      loadContacts();        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Manuál a kontakty] Chyba pri uloženie kontaktu:', {        timestamp,        operation: 'handleSaveContact',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri uloženie kontaktu.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    } finally {      setIsSaving(false);    }  };  const handleDeleteContact = async (id: string) => {    try {      const { error } = await supabase        .from('contacts')        .delete()        .eq('id', id);      if (error) throw error;      setContacts(prev => prev.filter(contact => contact.id !== id));      toast.success(t('manual.contacts.messages.deleted'));        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Manuál a kontakty] Chyba pri odstránenie kontaktu:', {        timestamp,        operation: 'handleDeleteContact',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri odstránenie kontaktu.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    }  };  const loadKeyDocuments = async () => {    try {      const { data: { user } } = await supabase.auth.getUser();      if (!user) return;      const { data, error } = await supabase        .from('documents')        .select('*')        .eq('user_id', user.id)        .eq('is_key_document', true)        .order('created_at', { ascending: false });      if (error) {        throw error;      }      setDocuments(data || []);        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Manuál a kontakty] Chyba pri načítanie kľúčových dokumentov:', {        timestamp,        operation: 'loadKeyDocuments',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri načítanie kľúčových dokumentov.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    } finally {      setIsDocumentsLoading(false);    }  };  const getCountryFlag = (countryCode: string) => {    // Simple flag mapping - in a real app you'd want a more comprehensive solution    const flags: { [key: string]: string } = {      'SK': '🇸🇰', 'CZ': '🇨🇿', 'DE': '🇩🇪', 'AT': '🇦🇹', 'HU': '🇭🇺',      'PL': '🇵🇱', 'IT': '🇮🇹', 'FR': '🇫🇷', 'ES': '🇪🇸', 'NL': '🇳🇱',      'BE': '🇧🇪', 'CH': '🇨🇭', 'US': '🇺🇸', 'GB': '🇬🇧', 'IE': '🇮🇪'    };    return flags[countryCode] || '🏳️';  };  const loadInstructions = async () => {    try {      const { data: { user } } = await supabase.auth.getUser();      if (!user) return;      const { data, error } = await supabase        .from('instructions')        .select('*')        .eq('user_id', user.id)        .single();      if (error && error.code !== 'PGRST116') {        throw error;      }      setInstructions(data);        } catch (error: Record<string, unknown>) {      const timestamp = new Date().toISOString();      const errorMessage = error?.message || 'Neznáma chyba';      const errorCode = error?.code || 'UNKNOWN_ERROR';            // Detailné logovanie pre debugging      console.error('[Manuál a kontakty] Chyba pri načítanie inštrukcií:', {        timestamp,        operation: 'loadInstructions',        errorCode,        errorMessage,        errorDetails: error,        stack: error?.stack      });            // Používateľsky prívetivá správa      let userMessage = 'Nastala chyba pri načítanie inštrukcií.';            // Špecifické správy podľa typu chyby      if (error?.code === 'PGRST116') {        userMessage = 'Požadované dáta neboli nájdené.';      } else if (error?.message?.includes('network')) {        userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';      } else if (error?.message?.includes('permission')) {        userMessage = 'Nemáte oprávnenie na túto akciu.';      } else if (error?.message?.includes('duplicate')) {        userMessage = 'Takýto záznam už existuje.';      }            toast.error(userMessage);    } finally {      setIsInstructionsLoading(false);    }  };  const debouncedSaveInstructions = useCallback(    async (field: keyof Instructions, value: string) => {      try {        const { data: { user } } = await supabase.auth.getUser();        if (!user) return;        const instructionsData = {          user_id: user.id,          [field]: value.trim() || null,        };        if (instructions) {          const { error } = await supabase            .from('instructions')            .update(instructionsData)            .eq('id', instructions.id);          if (error) throw error;        } else {          const { data, error } = await supabase            .from('instructions')            .insert([instructionsData])            .select()            .single();          if (error) throw error;          setInstructions(data);        } catch (error: Record<string, unknown>) {        const timestamp = new Date().toISOString();        const errorMessage = error?.message || 'Neznáma chyba';        const errorCode = error?.code || 'UNKNOWN_ERROR';                // Detailné logovanie pre debugging        console.error('[Manuál a kontakty] Chyba pri načítanie inštrukcií:', {          timestamp,          operation: 'loadInstructions',          errorCode,          errorMessage,          errorDetails: error,          stack: error?.stack        });                // Používateľsky prívetivá správa        let userMessage = 'Nastala chyba pri načítanie inštrukcií.';                // Špecifické správy podľa typu chyby        if (error?.code === 'PGRST116') {          userMessage = 'Požadované dáta neboli nájdené.';        } else if (error?.message?.includes('network')) {          userMessage = 'Chyba pripojenia. Skontrolujte internetové pripojenie.';        } else if (error?.message?.includes('permission')) {          userMessage = 'Nemáte oprávnenie na túto akciu.';        } else if (error?.message?.includes('duplicate')) {          userMessage = 'Takýto záznam už existuje.';        }                toast.error(userMessage);      }    },    [instructions]  );  const getExpirationStatus = (expirationDate: string | null) => {    if (!expirationDate) return null;        const today = new Date();    const expiry = new Date(expirationDate);    const diffTime = expiry.getTime() - today.getTime();    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));        if (diffDays < 0) {      return { text: t('manual.documents.expiration.expired'), variant: 'destructive' as const };    } else if (diffDays <= 30) {      return { text: t('manual.documents.expiration.expiresSoon'), variant: 'destructive' as const };    } else if (diffDays <= 90) {      return { text: t('manual.documents.expiration.expiring'), variant: 'secondary' as const };    }    return null;  };  return (    <ErrorBoundary>      <div className=\"container mx-auto px-4 lg:px-8 py-8 space-y-6\">      {/* Header */}      <div className=\"flex items-center gap-3\">        <BookUser className=\"h-8 w-8 text-primary\" />        <div>          <h1 className=\"text-3xl font-bold\">{t('manual.title')}</h1>          <p className=\"text-muted-foreground\">            {t('manual.subtitle')}          </p>        </div>      </div>      {/* Main Content */}      <Tabs defaultValue=\"contacts\" className=\"space-y-6\">        <TabsList className=\"grid w-full grid-cols-3\">          <TabsTrigger value=\"contacts\">{t('manual.tabs.contacts')}</TabsTrigger>          <TabsTrigger value=\"documents\">{t('manual.tabs.documents')}</TabsTrigger>          <TabsTrigger value=\"instructions\">{t('manual.tabs.instructions')}</TabsTrigger>        </TabsList>        <TabsContent value=\"contacts\" className=\"space-y-6\">          {/* Add Contact Button */}          <div className=\"flex justify-between items-center\">            <div>              <h2 className=\"text-xl font-semibold\">{t('manual.contacts.title')}</h2>              <p className=\"text-muted-foreground\">                {t('manual.contacts.description')}              </p>            </div>            <Sheet open={isContactSheetOpen} onOpenChange={setIsContactSheetOpen}>              <SheetTrigger asChild>                <Button onClick={handleAddContact}>                  <Plus className=\"mr-2 h-4 w-4\" />                  {t('manual.contacts.addContact')}                </Button>              </SheetTrigger>              <SheetContent>                <SheetHeader>                  <SheetTitle>                    {editingContact ? t('manual.contacts.form.editTitle') : t('manual.contacts.form.addTitle')}                  </SheetTitle>                  <SheetDescription>                    {t('manual.contacts.form.description')}                  </SheetDescription>                </SheetHeader>                <div className=\"space-y-4 mt-6\">                  <div className=\"space-y-2\">                    <Label htmlFor=\"contactName\">{t('manual.contacts.form.nameLabel')}</Label>                    <Input                      id=\"contactName\"                      placeholder={t('manual.contacts.form.namePlaceholder')}                      value={formData.name}                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}                    />                  </div>                  <div className=\"space-y-2\">                    <Label htmlFor=\"role\">{t('manual.contacts.form.roleLabel')}</Label>                    <Input                      id=\"role\"                      placeholder={t('manual.contacts.form.rolePlaceholder')}                      value={formData.role}                      onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}                    />                  </div>                  <div className=\"space-y-2\">                    <Label htmlFor=\"phone\">{t('manual.contacts.form.phoneLabel')}</Label>                    <Input                      id=\"phone\"                      placeholder={t('manual.contacts.form.phonePlaceholder')}                      value={formData.phone_number}                      onChange={(e) => setFormData(prev => ({ ...prev, phone_number: e.target.value }))}                    />                  </div>                  <div className=\"space-y-2\">                    <Label htmlFor=\"email\">{t('manual.contacts.form.emailLabel')}</Label>                    <Input                      id=\"email\"                      type=\"email\"                      placeholder={t('manual.contacts.form.emailPlaceholder')}                      value={formData.email}                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}                    />                  </div>                  <div className=\"space-y-2\">                    <Label htmlFor=\"notes\">{t('manual.contacts.form.notesLabel')}</Label>                    <Textarea                      id=\"notes\"                      placeholder={t('manual.contacts.form.notesPlaceholder')}                      value={formData.notes}                      onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}                      rows={3}                    />                  </div>                  <div className=\"flex gap-3 pt-4\">                    <Button                      variant=\"outline\"                      onClick={() => setIsContactSheetOpen(false)}                      className=\"flex-1\"                      disabled={isSaving}                    >                      {t('manual.contacts.form.cancel')}                    </Button>                    <Button                      onClick={handleSaveContact}                      className=\"flex-1\"                      disabled={isSaving}                    >                      {isSaving ? (                        <>                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>                          {t('manual.contacts.form.saving')}                        </>                      ) : (                        editingContact ? t('manual.contacts.form.updateButton') : t('manual.contacts.form.addButton')                      )}                    </Button>                  </div>                </div>              </SheetContent>            </Sheet>          </div>          {/* Contacts List */}          {isLoading ? (            <div className=\"flex items-center justify-center py-12\">              <div className=\"text-center\">                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>                <p className=\"text-muted-foreground\">{t('manual.contacts.loading')}</p>              </div>            </div>          ) : contacts.length === 0 ? (            <Card>              <CardContent className=\"py-12 text-center\">                <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />                <h3 className=\"text-lg font-semibold mb-2\">{t('manual.contacts.empty.title')}</h3>                <p className=\"text-muted-foreground mb-4\">                  {t('manual.contacts.empty.description')}                </p>                <Button onClick={handleAddContact}>                  <Plus className=\"mr-2 h-4 w-4\" />                  {t('manual.contacts.addFirstContact')}                </Button>              </CardContent>            </Card>          ) : (            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">              {contacts.map((contact) => (                <Card key={contact.id} className=\"hover:shadow-lg transition-shadow\">                  <CardHeader className=\"pb-3\">                    <div className=\"flex items-start justify-between\">                      <div className=\"flex items-center gap-3\">                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">                          <User className=\"h-5 w-5 text-primary\" />                        </div>                        <div>                          <CardTitle className=\"text-lg\">{contact.name}</CardTitle>                          <Badge variant=\"secondary\" className=\"text-xs\">                            {contact.role}                          </Badge>                        </div>                      </div>                    </div>                  </CardHeader>                  <CardContent className=\"space-y-3\">                    {contact.phone_number && (                      <div className=\"flex items-center gap-2 text-sm\">                        <Phone className=\"h-4 w-4 text-muted-foreground\" />                        <span>{contact.phone_number}</span>                      </div>                    )}                    {contact.email && (                      <div className=\"flex items-center gap-2 text-sm\">                        <Mail className=\"h-4 w-4 text-muted-foreground\" />                        <span className=\"truncate\">{contact.email}</span>                      </div>                    )}                    {contact.notes && (                      <p className=\"text-sm text-muted-foreground line-clamp-2\">                        {contact.notes}                      </p>                    )}                                        <div className=\"flex gap-2 pt-2\">                      <Button                        variant=\"outline\"                        size=\"sm\"                        onClick={() => handleEditContact(contact)}                        className=\"flex-1\"                      >                        <Edit className=\"mr-1 h-3 w-3\" />                        {t('manual.contacts.card.edit')}                      </Button>                      <Button                        variant=\"outline\"                        size=\"sm\"                        onClick={() => handleDeleteContact(contact.id)}                        className=\"text-destructive hover:text-destructive\"                      >                        <Trash2 className=\"h-3 w-3\" />                      </Button>                    </div>                  </CardContent>                </Card>              ))}            </div>          )}        </TabsContent>        <TabsContent value=\"documents\" className=\"space-y-6\">          <div className=\"flex justify-between items-center\">            <div>              <h2 className=\"text-xl font-semibold\">{t('manual.documents.title')}</h2>              <p className=\"text-muted-foreground\">                {t('manual.documents.description')}              </p>            </div>          </div>          {/* Key Documents List */}          {isDocumentsLoading ? (            <div className=\"flex items-center justify-center py-12\">              <div className=\"text-center\">                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>                <p className=\"text-muted-foreground\">{t('manual.documents.loading')}</p>              </div>            </div>          ) : documents.length === 0 ? (            <Card>              <CardContent className=\"py-12 text-center\">                <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />                <h3 className=\"text-lg font-semibold mb-2\">{t('manual.documents.empty.title')}</h3>                <p className=\"text-muted-foreground mb-4\">                  {t('manual.documents.empty.description')}                </p>                <Badge variant=\"outline\" className=\"text-xs\">                  <Star className=\"mr-1 h-3 w-3\" />                  {t('manual.documents.empty.tip')}                </Badge>              </CardContent>            </Card>          ) : (            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">              {documents.map((document) => (                <Card key={document.id} className=\"hover:shadow-lg transition-shadow\">                  <CardHeader className=\"pb-3\">                    <div className=\"flex items-start justify-between\">                      <div className=\"flex items-center gap-3\">                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">                          <FileText className=\"h-5 w-5 text-primary\" />                        </div>                        <div>                          <CardTitle className=\"text-lg\">{document.name}</CardTitle>                          <Badge variant=\"secondary\" className=\"text-xs\">                            {document.type}                          </Badge>                        </div>                      </div>                      <div className=\"flex items-center gap-2\">                        <span className=\"text-lg\">{getCountryFlag(document.country_code)}</span>                        <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />                      </div>                    </div>                  </CardHeader>                  <CardContent>                    {getExpirationStatus(document.expiration_date) && (                      <Badge                         variant={getExpirationStatus(document.expiration_date)!.variant}                        className=\"text-xs mb-2\"                      >                        {getExpirationStatus(document.expiration_date)!.text}                      </Badge>                    )}                    <p className=\"text-xs text-muted-foreground\">                      {t('manual.documents.card.essentialNote')}                    </p>                  </CardContent>                </Card>              ))}            </div>          )}        </TabsContent>        <TabsContent value=\"instructions\" className=\"space-y-6\">          <div className=\"flex justify-between items-center\">            <div>              <h2 className=\"text-xl font-semibold\">{t('manual.instructions.title')}</h2>              <p className=\"text-muted-foreground\">                {t('manual.instructions.description')}              </p>            </div>          </div>          {isInstructionsLoading ? (            <div className=\"flex items-center justify-center py-12\">              <div className=\"text-center\">                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>                <p className=\"text-muted-foreground\">{t('manual.instructions.loading')}</p>              </div>            </div>          ) : (            <div className=\"space-y-6\">              {/* Funeral Wishes */}              <Card>                <CardHeader>                  <CardTitle className=\"flex items-center gap-2\">                    <Heart className=\"h-5 w-5 text-primary\" />                    {t('manual.instructions.funeral.title')}                  </CardTitle>                  <CardDescription>                    {t('manual.instructions.funeral.description')}                  </CardDescription>                </CardHeader>                <CardContent>                  <Textarea                    placeholder={t('manual.instructions.funeral.placeholder')}                    value={instructions?.funeral_wishes || ''}                    onChange={(e) => {                      const value = e.target.value;                      setInstructions(prev => prev ? { ...prev, funeral_wishes: value } : { id: '', funeral_wishes: value });                      debouncedSaveInstructions('funeral_wishes', value);                    }}                    rows={4}                    className=\"resize-none\"                  />                </CardContent>              </Card>              {/* Digital Accounts */}              <Card>                <CardHeader>                  <CardTitle className=\"flex items-center gap-2\">                    <Trash className=\"h-5 w-5 text-primary\" />                    {t('manual.instructions.digitalAccounts.title')}                  </CardTitle>                  <CardDescription>                    {t('manual.instructions.digitalAccounts.description')}                  </CardDescription>                </CardHeader>                <CardContent>                  <Textarea                    placeholder={t('manual.instructions.digitalAccounts.placeholder')}                    value={instructions?.digital_accounts_shutdown || ''}                    onChange={(e) => {                      const value = e.target.value;                      setInstructions(prev => prev ? { ...prev, digital_accounts_shutdown: value } : { id: '', digital_accounts_shutdown: value });                      debouncedSaveInstructions('digital_accounts_shutdown', value);                    }}                    rows={4}                    className=\"resize-none\"                  />                </CardContent>              </Card>              {/* Messages to Loved Ones */}              <Card>                <CardHeader>                  <CardTitle className=\"flex items-center gap-2\">                    <MessageSquare className=\"h-5 w-5 text-primary\" />                    {t('manual.instructions.messages.title')}                  </CardTitle>                  <CardDescription>                    {t('manual.instructions.messages.description')}                  </CardDescription>                </CardHeader>                <CardContent>                  <Textarea                    placeholder={t('manual.instructions.messages.placeholder')}                    value={instructions?.messages_to_loved_ones || ''}                    onChange={(e) => {                      const value = e.target.value;                      setInstructions(prev => prev ? { ...prev, messages_to_loved_ones: value } : { id: '', messages_to_loved_ones: value });                      debouncedSaveInstructions('messages_to_loved_ones', value);                    }}                    rows={6}                    className=\"resize-none\"                  />                </CardContent>              </Card>              <div className=\"text-center py-4\">                <Badge variant=\"outline\" className=\"text-xs\">                  <Star className=\"mr-1 h-3 w-3\" />                  {t('manual.instructions.autoSaveNote')}                </Badge>              </div>            </div>          )}        </TabsContent>      </Tabs>    </div>  );};\n","usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_quarantine/20250811_120715/backup-before-retry/pages/Will.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/cleanup-unused-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/final-cleanup.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/final-consolidation.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/final-validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/final-verification.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-broken-references.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-duplicates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-duplicates.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-linting-errors.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-linting-errors.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-modular-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-namespace-references.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-old-translation-calls.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-translation-file-references.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/fix-translation-mapping.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/i18n-audit.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/i18n-audit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/i18n-extractor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/i18n-refactor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/translate-all-languages.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.cleanup_trash/20250811_120444/scripts/translate-auth-to-german.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.eslintrc.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/.venv/lib/python3.9/site-packages/urllib3/contrib/emscripten/emscripten_fetch_worker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/PersonalizationEngine.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/ProgressiveQuestionLogic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/ProgressiveQuestionLogicWithAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/add_auth_section.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/audit-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/backup-cleanup-final.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/check-final-missing.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/check-final.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/check-missing.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/check_documents_translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/compare_translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/cypress.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/cypress/e2e/asset-story.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/cypress/e2e/basic-smoke-test.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/cypress/e2e/critical-paths.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/cypress/e2e/onboarding.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/cypress/e2e/premium-upgrade.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/cypress/support/commands.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/cypress/support/e2e.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/deployment/functions/send-critical-error-alert/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/docs/clear-geo-cache.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/final-cleanup.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/final-lint-fixes.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/fix-all-lint-errors.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/fix-auth-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/fix-critical-errors.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/fix-french-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/fix-remaining-issues.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/fix_translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/hooks/useAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/hooks/useDocumentUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/hooks/useOCR.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/__tests__/openai.service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/document-preprocessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/document-storage.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/document-upload.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/document-upload.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/ocr.patterns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/ocr.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/ocr.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/openai.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/openai.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/services/openai.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/utils/encryption-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/utils/file-validators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/utils/image-compression.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/lib/workers/ocr.worker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/progressiveQuestionAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/public/service-worker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/public/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/accurate-cleanup-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/add-app-name-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/add-error-boundaries.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/add-landing-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/add-notfound-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/add-notfound-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/add-retry-mechanism.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/analyze-common-usage.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/analyze-dashboard-keys.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/backup-wills.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/check-missing-keys.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/clean-unused-i18n.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/complete-migration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/complete-ui-misc-split.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/comprehensive-i18n-validation.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/comprehensive-translation-fix.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/comprehensive-translation-system.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/comprehensive-translation-system.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/consolidate-i18n.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/content-audit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/copy-email-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/copy-marketing-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/dev-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/extract-translation-keys.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/extract-used-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/find-unused-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/improve-catch-blocks.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/improved-migration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/merge-small-files.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/migrate-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/refactor-component-i18n.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/reorganize-common.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/report-unused-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/reset-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/restore-and-consolidate.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/restore-missing-keys.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/run-e2e-tests.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/run-migrations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/seed-test-personas.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/split-ui-misc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/test-error-logging.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/test-personas-automated.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/test-personas-report.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/update-namespace-references.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/update-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/update-ui-namespaces.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/update_czech_templates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/validate-no-old-keys.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/validate-terminology.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/validate-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/verify-all-namespaces.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/verify-translation-calls.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/scripts/visual-regression-helper.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/__tests__/emailNotifications.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/__tests__/professional-onboarding-integration.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/__tests__/timeCapsule.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/__tests__/timeCapsule.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/api/executor/__tests__/generateExecutorTasks.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/api/executor/tasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/api/middleware/adminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/api/will/get-template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/admin/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/ai/analyze-document/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/billing/create-checkout-session/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/billing/create-portal-session/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/billing/webhook/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/cron/behavioral-nudges/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/cron/check-expirations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/dev/grant-premium/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/documents/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/documents/process/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/emergency/send-test/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/executor/tasks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/family-hub/access-level/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/family-hub/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/ping/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/privacy-settings/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/push/subscribe/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/push/unsubscribe/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/time-capsule/[id]/mark-delivered/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/time-capsule/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/time-capsule/generate-upload-url/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/time-capsule/received/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/time-capsule/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/transparency/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/trusted-people/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/trusted-people/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/webhooks/clerk/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/webhooks/skribble/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/webhooks/stripe/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/webhooks/will-validation/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/will/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/will/__tests__/will-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/will/__tests__/will-integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/will/generate-pdf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/will/generate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/will/list/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/will/notarize/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/api/will/sign/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/app/consultations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/AddLiabilityModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/AnnualReview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/BeneficiaryCommunicationLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ComplexityReduction.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/CreateTimeCapsuleModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/DataTransparency.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/DocumentConfirmation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/DocumentUploadFlow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/DocumentUploader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/EditStoryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/EmotionalContextSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ExecutorDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ExecutorManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ExecutorStatusReporting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/FamilyCrisisAssessment.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 't'. Either include it or remove the dependency array.","line":177,"column":6,"nodeType":"ArrayExpression","endLine":177,"endColumn":67,"suggestions":[{"desc":"Update the dependencies array to be: [userAssets, userDocuments, userGuardians, t, userBeneficiaries.length]","fix":{"range":[6348,6409],"text":"[userAssets, userDocuments, userGuardians, t, userBeneficiaries.length]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/FamilyCrisisPrevention.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/FamilyExecutorStatusView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/FamilyPreparednessIndex.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/FamilyPreparednessTools.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/FeatureFlagProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/GenderAwareExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/JustInTimeAccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/LanguageSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/LegacyGuardSignature.constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/LegacyGuardSignature.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/LegacyGuardSignature.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/LegalConsultationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/LocalPrivacyProtection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/LocalProcessingIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/LogLifeEvent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/MicroTaskGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/MyPossessions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/NotificationSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/NotificationsBell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/OCRProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/PWAInstallBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/PasswordWall.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/PrivacyControlPanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 't'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [getToken, t]","fix":{"range":[2119,2129],"text":"[getToken, t]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/RouteWithNamespaces.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/SEO/MetaTags.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/SEO/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ScenarioPlanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/SecurityStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/UpgradeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/VisualConnectionSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/WhatIfScenarios.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/WillGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/__tests__/Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/__tests__/PrivacyControlPanel.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/__tests__/SmartUploadZone.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/acknowledgments/FamilyProtectionVisualization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/acknowledgments/ProtectionAcknowledgment.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/admin/AnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/admin/UXMetricsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ai/DocumentUploadExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/alerts/AlertCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/analytics/AnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/analytics/AnalyticsDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assets/AssetCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assets/AssetTypeSelectorModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assets/DynamicAssetForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assets/LifeInventoryAssistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assistant/AssistantActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assistant/AssistantAvatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assistant/AssistantMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assistant/EnhancedPersonalAssistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/assistant/PersonalAssistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/auth/AuthSyncProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/auth/AuthenticatedRedirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/auth/PasswordWallContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/auth/PasswordWallProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/auth/ProfessionalFlowManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/auth/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/auth/UserFlowManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/auth/usePasswordWall.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/AsyncErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/CountryLanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/CountrySelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/ErrorBoundaryI18n.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/ErrorRecovery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/FormErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/LanguageSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/PublicFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/RetryStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/RouteErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/common/withAsyncErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/cultural/CulturalAdaptation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/AssetForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/BeneficiaryForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/ContextHelp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/DocumentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/DocumentUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/EnhancedProgressTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/FamilyGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/FirstTimeUserGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/GuardianCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/GuardianUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/NextStepRecommendations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/PersonalizedDashboardContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/PillarColumn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/ProfessionalDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/ProfessionalProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/ProgressNudge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/QuickTasks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/StrategicSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/TaskCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/debug/ErrorDebugPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/debug/FeatureFlagPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/debug/I18nDebug.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/debug/TranslationTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/documents/DocumentEditModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/documents/FamilyAccessGuidance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/documents/FamilyInformationOrganizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/documents/UrgencyBasedOrganization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/emails/EmailTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/emergency/EmergencyContacts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/emergency/EmergencyProtocolConfig.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/emergency/NotificationPreferences.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/emotional/OverwhelmSupport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/emotional/ProcrastinationSupport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/errors/EmotionalRecoverySupport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/errors/EmpatheticErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/errors/EmpatheticFormError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/errors/ProactiveErrorPrevention.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/errors/ProgressiveErrorRecovery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/errors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/examples/EmpatheticFormExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/examples/TranslationExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/family/FamilySituationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/family/SingleParentSupport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/feedback/EmpathyFeedback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/guardian/GuardianPlaybook.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/guardian/TemplateModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/guardians/GuardianPlaybook.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/guardians/GuardianPlaybookView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/impact/FamilyImpactPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/EmotionalValidation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/FamilyPreparednessCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/FamilyTestimonials.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/LandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/PainPoints.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/PricingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/RespectfulLanding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/ScenarioShowcase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/landing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/layout/MainLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/layout/MarketingLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/layout/MobileNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/layout/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/layouts/LegalLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/legal/PrivacyPolicy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/legal/TermsOfService.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/legal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/lifeEvents/LifeEventDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/lifeEvents/LifeEventNotification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/lifeEvents/LifeEventUpdateWorkflow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/lifeEvents/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/loading/EmpatheticButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/loading/EmpatheticError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/loading/EmpatheticLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/loading/EmpatheticLoadingExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/loading/EmpatheticTransition.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/loading/EmpatheticValidation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/loading/ProgressStory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/loading/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/manual/ContactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/milestones/MilestoneCelebration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/milestones/ProtectionMilestone.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/modals/CountryLanguageModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/modals/RedirectSimulationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ocr/HybridDocumentProcessor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/BasicLifeQuestions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/EssentialQuestions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/FirstTimeUserGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/ImmediateValueUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/OnboardingWizard.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'endTimer', 'sessionTimerId', 'startTimer', and 'trackAction'. Either include them or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [endTimer, isOpen, sessionTimerId, startTimer, trackAction]","fix":{"range":[3773,3781],"text":"[endTimer, isOpen, sessionTimerId, startTimer, trackAction]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/RespectfulOnboarding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/essentialRecommendations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/onboarding/lifeAnswersMapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/pricing/PricingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/pricing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/privacy/ConsentManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/professional/ProfessionalUIComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/professional/__tests__/ProfessionalUIComponents.edge-cases.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/professional/__tests__/ProfessionalUIComponents.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/progressive/ContextualFeatureIntroduction.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/progressive/ProgressiveDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/progressive/ProgressiveDashboardExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/progressive/ProgressiveDisclosureWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/progressive/ProtectionProgressDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/progressive/ProtectionProgressExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/reminders/ReminderCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/reminders/ReminderDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/reminders/ReminderNotification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/reminders/ReminderSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/reminders/ReminderToast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/reminders/dashboard-integration.example.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/reminders/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/settings/GenderPreferenceSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/settings/PrivacySettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/sharing/ShareModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/sharing/SharedContentViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/suggestions/SmartSuggestionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/suggestions/SmartSuggestionsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/templates/ComponentTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/test/ErrorTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/LoadingStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/ThemeSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/badge-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/button-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/card-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/form-field.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/loading-spinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/navigation-menu-trigger-style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/optimized-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/toggle-variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/upload/DocumentPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/upload/SmartUploadZone.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/upload/UploadProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/will/LegacyImpactVisualization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/will/LegacyPlanningAssistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/willSync/WillSyncNotification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/willSync/WillSyncSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/willSync/WillVersionHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/components/willSync/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/config/acknowledgmentCategories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/config/countries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/config/featureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/config/featureFlagsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/config/features.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/constants/protectionMilestones.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/AssistantContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/AssistantContextType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/CountryContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/CountryContextContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/ErrorContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/GrowthBookContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/SubscriptionContext.constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/SubscriptionContext.context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/SubscriptionContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/SubscriptionContext.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/SubscriptionContextContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/contexts/ThemeContextContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/data/playbookTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/assets-vault/components/AssetDetail.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchLiabilities' and 'loadAsset'. Either include them or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [assetId, fetchLiabilities, isNewAsset, loadAsset]","fix":{"range":[3105,3126],"text":"[assetId, fetchLiabilities, isNewAsset, loadAsset]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/assets-vault/components/AssetFileUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/assets-vault/components/AssetForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/assets-vault/components/AssetOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/assets-vault/components/VaultDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/assets-vault/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/assets-vault/services/AssetFileService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/dashboard/components/Dashboard.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 't', 'updateEmotionalState', 'updateProgress', and 'useProfessionalDashboard'. Either include them or remove the dependency array.","line":147,"column":6,"nodeType":"ArrayExpression","endLine":147,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [t, updateEmotionalState, updateProgress, useProfessionalDashboard, user]","fix":{"range":[6602,6608],"text":"[t, updateEmotionalState, updateProgress, useProfessionalDashboard, user]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/dashboard/components/ProfessionalDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/dashboard/components/ProfessionalDashboardIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/digital-heritage/services/AssetManagementService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/digital-heritage/services/DeadManSwitchService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/digital-heritage/services/NotificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/digital-heritage/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/family-circle/components/BeneficiariesForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/family-circle/components/FamilyHub.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 't' and 'updateEmotionalState'. Either include them or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [getToken, t, updateEmotionalState]","fix":{"range":[3769,3779],"text":"[getToken, t, updateEmotionalState]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/family-circle/components/TrustedCircle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/family-circle/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/legacy-briefing/components/LegacyBriefing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/legacy-briefing/components/LegacyLetters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/legacy-briefing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/onboarding/components/ProfessionalFlowManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/subscriptions/components/SubscriptionDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/subscriptions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/time-capsule/components/ReceivedMessages.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/time-capsule/components/VideoRecorder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/time-capsule/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/api/WillTemplateService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/components/AssetAllocationWizard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/components/BeneficiariesForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/components/CountrySelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/components/ExecutorSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/components/WillForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/components/WillGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/components/WillPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/features/will-generator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/functions/category-suggester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/functions/document-classifier.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/functions/metadata-extractor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/functions/relationship-detector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/functions/text-extractor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useAcknowledgmentManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useAnalytics.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'startTimeRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'startTimeRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":55,"column":53,"nodeType":"Identifier","endLine":55,"endColumn":60,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useAssistant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useAuthLogging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useCountry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useDocuments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useEmailNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useEmpatheticError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useExecutorTasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useFeatureFlag.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useFeatureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useFormField.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useGenderedTranslation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useGeoLocation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useGrowthBook.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useLifeEventTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useLoadingState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useLocalOCR.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useOnlineStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/usePWA.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/usePerformanceMonitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useProfessionalProgress.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useSidebar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useStorageUsage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useSubscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useTranslationNamespaces.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useUXMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useUsageNudge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useUserJourney.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useUserPlan.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/hooks/useUserSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/cleanup-original-common.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/gender-context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/scan-malformed-json.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/split-all-langs.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/split-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/i18n/useGenderAwareTranslation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/infra/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/__tests__/utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/api/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/api/requirePremium.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/api/services/base.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/hooks/useApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/monitoring/sentry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/pushNotificationSender.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/server-i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/stores/app.store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/supabase-server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/utils/cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/lib/utils/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/middleware/rateLimiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/middleware/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/monitoring/empathyMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/AIDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/CookiePolicy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/DocumentUploadDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Family.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/GuardianView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Help.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/InviteAcceptance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/LegacyBriefing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/LegacyLetters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Manual.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadContacts', 'loadInstructions', and 'loadKeyDocuments'. Either include them or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadContacts, loadInstructions, loadKeyDocuments]","fix":{"range":[2470,2472],"text":"[loadContacts, loadInstructions, loadKeyDocuments]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/OCRDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Pricing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/PrivacyPolicy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/RefundPolicy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/Subscription.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/SubscriptionCancel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/SubscriptionSuccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/TermsOfService.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/TestError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/UploadDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/admin/Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/subscription/cancel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/pages/subscription/success.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/providers/GeoLocationProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/schemas/assetSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/schemas/beneficiarySchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/schemas/contactSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/schemas/documentSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/schemas/guardianSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/schemas/willSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/BehavioralNudges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/LegalConsultationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/LifeEventService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/LifeMilestoneTriggers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/LivingLegacy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/ProfessionalProgressService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/ProgressService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/StripePaymentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/SubscriptionService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/ProfessionalProgressService.edge-cases.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/ProfessionalProgressService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/analytics.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/annualReviewService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/dashboardService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/livingLegacyService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/loggingService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/preparednessScore.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/sharingService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/willBackupService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/__tests__/willGeneratorService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/acknowledgmentTriggers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/analytics.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/authService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/contextualTiming.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/eSignature.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/eSignatureService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/emailService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/emotionalIntelligence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/executorTaskService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/expiration-intelligence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/familyProtectionDisclosure.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/familySituationAnalysis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/geolocation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/impactAssessment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/inactivityCheck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/integrationVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/languageDetection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/legalDocumentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/lifeEventDetection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/loggingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/notarizationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/notificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/ocr/LocalProcessingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/onboardingAnalysis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/pdfGenerationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/progressiveDisclosure.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/pushNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/sharingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/smartSuggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/stripeService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/suggestionLearning.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/timeCapsuleDelivery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/willBackupService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/willNotificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/services/willSyncService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/styles/professional-tailwind-preset.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test-utils/MockClerkProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":100,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":100,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":100,"column":26,"nodeType":"Identifier","messageId":"namedExport","endLine":100,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":102,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":102,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":103,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":103,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":104,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":104,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":105,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":105,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":106,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":106,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":107,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":107,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":108,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":108,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test-utils/mockClerkContexts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test-utils/mockClerkExports.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":6,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":6,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":14,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":14,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":22,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":22,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":31,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":31,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":40,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":40,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":48,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":48,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test-utils/mockClerkHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test-utils/mockClerkHooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test-utils/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test/helpers/supabase-mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test/mocks/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test/testFactories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test/testProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/test/utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/testing/completeJourneyTest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/testing/empathyQAChecklist.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/testing/empathyTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/testing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/testing/uxAudit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/__tests__/will.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/document-ai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/onboarding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/sharing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/timeCapsule.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/will.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/types/willSync.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/analyticsHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/clearGeoCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/componentHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/currency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/dateFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/documentCategories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/domainRedirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/env-check.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/error-logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/errorTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/logger.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[153,156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[153,156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[580,583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[580,583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/planLimits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/reminderUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/retry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/stackTrace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/supabaseWithRetry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/support.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/validationMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/utils/willRequirements.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/supabase/functions/_shared/cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/supabase/functions/cancel-subscription/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/supabase/functions/create-checkout-session/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/supabase/functions/create-portal-session/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/supabase/functions/generate-executor-tasks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/supabase/functions/resume-subscription/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/supabase/functions/send-critical-error-alert/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/supabase/functions/send-emergency-notification/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/sync-french-translations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/asset-story.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/core-vault-setup.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/debug.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/document-upload.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/golden-path.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/login.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/minimal.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/premium-access.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/premium-feature-access.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/setup/test-setup.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useFixture\" is called in function \"authenticatedPage\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":19,"column":11,"nodeType":"Identifier","endLine":19,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useFixture\" is called in function \"mockAuth\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":73,"column":11,"nodeType":"Identifier","endLine":73,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/utils/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/utils/fixtures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/e2e/visual-regression.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/tests/willSyncService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/ultimate-lint-fix.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/luborfedak/Documents/Github/phoenix/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
